/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/_artyom.js@1.0.6@artyom.js/build/artyom.js":
/*!*****************************************************************!*\
  !*** ./node_modules/_artyom.js@1.0.6@artyom.js/build/artyom.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\n/**\r\n * Artyom.js is a voice control, speech recognition and speech synthesis JavaScript library.\r\n *\r\n * @requires {webkitSpeechRecognition && speechSynthesis}\r\n * @license MIT\r\n * @version 1.0.6\r\n * @copyright 2017 Our Code World (www.ourcodeworld.com) All Rights Reserved.\r\n * @author Carlos Delgado (https://github.com/sdkcarlos) and Sema García (https://github.com/semagarcia)\r\n * @see https://sdkcarlos.github.io/sites/artyom.html\r\n * @see http://docs.ourcodeworld.com/projects/artyom-js\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n/// <reference path=\"artyom.d.ts\" />\r\n// Remove \"export default \" keywords if willing to build with `npm run artyom-build-window`\r\nvar Artyom = (function () {\r\n    // Triggered at the declaration of \r\n    function Artyom() {\r\n        this.ArtyomCommands = [];\r\n        this.ArtyomVoicesIdentifiers = {\r\n            // German\r\n            \"de-DE\": [\"Google Deutsch\", \"de-DE\", \"de_DE\"],\r\n            // Spanish\r\n            \"es-ES\": [\"Google español\", \"es-ES\", \"es_ES\", \"es-MX\", \"es_MX\"],\r\n            // Italian\r\n            \"it-IT\": [\"Google italiano\", \"it-IT\", \"it_IT\"],\r\n            // Japanese\r\n            \"jp-JP\": [\"Google 日本人\", \"ja-JP\", \"ja_JP\"],\r\n            // English USA\r\n            \"en-US\": [\"Google US English\", \"en-US\", \"en_US\"],\r\n            // English UK\r\n            \"en-GB\": [\"Google UK English Male\", \"Google UK English Female\", \"en-GB\", \"en_GB\"],\r\n            // Brazilian Portuguese\r\n            \"pt-BR\": [\"Google português do Brasil\", \"pt-PT\", \"pt-BR\", \"pt_PT\", \"pt_BR\"],\r\n            // Portugal Portuguese\r\n            // Note: in desktop, there's no voice for portugal Portuguese\r\n            \"pt-PT\": [\"Google português do Brasil\", \"pt-PT\", \"pt_PT\"],\r\n            // Russian\r\n            \"ru-RU\": [\"Google русский\", \"ru-RU\", \"ru_RU\"],\r\n            // Dutch (holland)\r\n            \"nl-NL\": [\"Google Nederlands\", \"nl-NL\", \"nl_NL\"],\r\n            // French\r\n            \"fr-FR\": [\"Google français\", \"fr-FR\", \"fr_FR\"],\r\n            // Polish\r\n            \"pl-PL\": [\"Google polski\", \"pl-PL\", \"pl_PL\"],\r\n            // Indonesian\r\n            \"id-ID\": [\"Google Bahasa Indonesia\", \"id-ID\", \"id_ID\"],\r\n            // Hindi\r\n            \"hi-IN\": [\"Google हिन्दी\", \"hi-IN\", \"hi_IN\"],\r\n            // Mandarin Chinese\r\n            \"zh-CN\": [\"Google 普通话（中国大陆）\", \"zh-CN\", \"zh_CN\"],\r\n            // Cantonese Chinese\r\n            \"zh-HK\": [\"Google 粤語（香港）\", \"zh-HK\", \"zh_HK\"],\r\n            // Native voice\r\n            \"native\": [\"native\"]\r\n        };\r\n        // Important: retrieve the voices of the browser as soon as possible.\r\n        // Normally, the execution of speechSynthesis.getVoices will return at the first time an empty array.\r\n        if (window.hasOwnProperty('speechSynthesis')) {\r\n            speechSynthesis.getVoices();\r\n        }\r\n        else {\r\n            console.error(\"Artyom.js can't speak without the Speech Synthesis API.\");\r\n        }\r\n        // This instance of webkitSpeechRecognition is the one used by Artyom.\r\n        if (window.hasOwnProperty('webkitSpeechRecognition')) {\r\n            this.ArtyomWebkitSpeechRecognition = new window.webkitSpeechRecognition();\r\n        }\r\n        else {\r\n            console.error(\"Artyom.js can't recognize voice without the Speech Recognition API.\");\r\n        }\r\n        this.ArtyomProperties = {\r\n            lang: 'en-GB',\r\n            recognizing: false,\r\n            continuous: false,\r\n            speed: 1,\r\n            volume: 1,\r\n            listen: false,\r\n            mode: \"normal\",\r\n            debug: false,\r\n            helpers: {\r\n                redirectRecognizedTextOutput: null,\r\n                remoteProcessorHandler: null,\r\n                lastSay: null,\r\n                fatalityPromiseCallback: null\r\n            },\r\n            executionKeyword: null,\r\n            obeyKeyword: null,\r\n            speaking: false,\r\n            obeying: true,\r\n            soundex: false,\r\n            name: null\r\n        };\r\n        this.ArtyomGarbageCollection = [];\r\n        this.ArtyomFlags = {\r\n            restartRecognition: false\r\n        };\r\n        this.ArtyomGlobalEvents = {\r\n            ERROR: \"ERROR\",\r\n            SPEECH_SYNTHESIS_START: \"SPEECH_SYNTHESIS_START\",\r\n            SPEECH_SYNTHESIS_END: \"SPEECH_SYNTHESIS_END\",\r\n            TEXT_RECOGNIZED: \"TEXT_RECOGNIZED\",\r\n            COMMAND_RECOGNITION_START: \"COMMAND_RECOGNITION_START\",\r\n            COMMAND_RECOGNITION_END: \"COMMAND_RECOGNITION_END\",\r\n            COMMAND_MATCHED: \"COMMAND_MATCHED\",\r\n            NOT_COMMAND_MATCHED: \"NOT_COMMAND_MATCHED\"\r\n        };\r\n        this.Device = {\r\n            isMobile: false,\r\n            isChrome: true\r\n        };\r\n        if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) {\r\n            this.Device.isMobile = true;\r\n        }\r\n        if (navigator.userAgent.indexOf(\"Chrome\") == -1) {\r\n            this.Device.isChrome = false;\r\n        }\r\n        /**\r\n         * The default voice of Artyom in the Desktop. In mobile, you will need to initialize (or force the language)\r\n         * with a language code in order to find an available voice in the device, otherwise it will use the native voice.\r\n         */\r\n        this.ArtyomVoice = {\r\n            default: false,\r\n            lang: \"en-GB\",\r\n            localService: false,\r\n            name: \"Google UK English Male\",\r\n            voiceURI: \"Google UK English Male\"\r\n        };\r\n    }\r\n    /**\r\n     * Add dinamically commands to artyom using\r\n     * You can even add commands while artyom is active.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/addcommands\r\n     * @since 0.6\r\n     * @param {Object | Array[Objects]} param\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.addCommands = function (param) {\r\n        var _this = this;\r\n        var processCommand = function (command) {\r\n            if (command.hasOwnProperty(\"indexes\")) {\r\n                _this.ArtyomCommands.push(command);\r\n            }\r\n            else {\r\n                console.error(\"The given command doesn't provide any index to execute.\");\r\n            }\r\n        };\r\n        if (param instanceof Array) {\r\n            for (var i = 0; i < param.length; i++) {\r\n                processCommand(param[i]);\r\n            }\r\n        }\r\n        else {\r\n            processCommand(param);\r\n        }\r\n        return true;\r\n    };\r\n    ;\r\n    /**\r\n     * The SpeechSynthesisUtterance objects are stored in the artyom_garbage_collector variable\r\n     * to prevent the wrong behaviour of artyom.say.\r\n     * Use this method to clear all spoken SpeechSynthesisUtterance unused objects.\r\n     *\r\n     * @returns {Array<any>}\r\n     */\r\n    Artyom.prototype.clearGarbageCollection = function () {\r\n        return this.ArtyomGarbageCollection = [];\r\n    };\r\n    ;\r\n    /**\r\n     * Displays a message in the console if the artyom propery DEBUG is set to true.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/debug\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.debug = function (message, type) {\r\n        var preMessage = \"[v\" + this.getVersion() + \"] Artyom.js\";\r\n        if (this.ArtyomProperties.debug === true) {\r\n            switch (type) {\r\n                case \"error\":\r\n                    console.log(\"%c\" + preMessage + \":%c \" + message, 'background: #C12127; color: black;', 'color:black;');\r\n                    break;\r\n                case \"warn\":\r\n                    console.warn(message);\r\n                    break;\r\n                case \"info\":\r\n                    console.log(\"%c\" + preMessage + \":%c \" + message, 'background: #4285F4; color: #FFFFFF', 'color:black;');\r\n                    break;\r\n                default:\r\n                    console.log(\"%c\" + preMessage + \":%c \" + message, 'background: #005454; color: #BFF8F8', 'color:black;');\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Artyom have it's own diagnostics.\r\n     * Run this function in order to detect why artyom is not initialized.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/detecterrors\r\n     * @param {type} callback\r\n     * @returns {}\r\n     */\r\n    Artyom.prototype.detectErrors = function () {\r\n        var _this = this;\r\n        if ((window.location.protocol) == \"file:\") {\r\n            var message = \"Error: running Artyom directly from a file. The APIs require a different communication protocol like HTTP or HTTPS\";\r\n            console.error(message);\r\n            return {\r\n                code: \"artyom_error_localfile\",\r\n                message: message\r\n            };\r\n        }\r\n        if (!_this.Device.isChrome) {\r\n            var message = \"Error: the Speech Recognition and Speech Synthesis APIs require the Google Chrome Browser to work.\";\r\n            console.error(message);\r\n            return {\r\n                code: \"artyom_error_browser_unsupported\",\r\n                message: message\r\n            };\r\n        }\r\n        if (window.location.protocol != \"https:\") {\r\n            console.warn(\"Warning: artyom is being executed using the '\" + window.location.protocol + \"' protocol. The continuous mode requires a secure protocol (HTTPS)\");\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Removes all the added commands of artyom.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/emptycommands\r\n     * @since 0.6\r\n     * @returns {Array}\r\n     */\r\n    Artyom.prototype.emptyCommands = function () {\r\n        return this.ArtyomCommands = [];\r\n    };\r\n    /**\r\n     * Returns an object with data of the matched element\r\n     *\r\n     * @private\r\n     * @param {string} comando\r\n     * @returns {MatchedCommand}\r\n     */\r\n    Artyom.prototype.execute = function (voz) {\r\n        var _this = this;\r\n        if (!voz) {\r\n            console.warn(\"Internal error: Execution of empty command\");\r\n            return;\r\n        }\r\n        // If artyom was initialized with a name, verify that the name begins with it to allow the execution of commands.\r\n        if (_this.ArtyomProperties.name) {\r\n            if (voz.indexOf(_this.ArtyomProperties.name) != 0) {\r\n                _this.debug(\"Artyom requires with a name \\\"\" + _this.ArtyomProperties.name + \"\\\" but the name wasn't spoken.\", \"warn\");\r\n                return;\r\n            }\r\n            // Remove name from voice command\r\n            voz = voz.substr(_this.ArtyomProperties.name.length);\r\n        }\r\n        _this.debug(\">> \" + voz);\r\n        /** @3\r\n         * Artyom needs time to think that\r\n         */\r\n        for (var i = 0; i < _this.ArtyomCommands.length; i++) {\r\n            var instruction = _this.ArtyomCommands[i];\r\n            var opciones = instruction.indexes;\r\n            var encontrado = -1;\r\n            var wildy = \"\";\r\n            for (var c = 0; c < opciones.length; c++) {\r\n                var opcion = opciones[c];\r\n                if (!instruction.smart) {\r\n                    continue; //Jump if is not smart command\r\n                }\r\n                // Process RegExp\r\n                if (opcion instanceof RegExp) {\r\n                    // If RegExp matches \r\n                    if (opcion.test(voz)) {\r\n                        _this.debug(\">> REGEX \" + opcion.toString() + \" MATCHED AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                        encontrado = parseInt(c.toString());\r\n                    }\r\n                    // Otherwise just wildcards\r\n                }\r\n                else {\r\n                    if (opcion.indexOf(\"*\") != -1) {\r\n                        ///LOGIC HERE\r\n                        var grupo = opcion.split(\"*\");\r\n                        if (grupo.length > 2) {\r\n                            console.warn(\"Artyom found a smart command with \" + (grupo.length - 1) + \" wildcards. Artyom only support 1 wildcard for each command. Sorry\");\r\n                            continue;\r\n                        }\r\n                        //START SMART COMMAND\r\n                        var before = grupo[0];\r\n                        var later = grupo[1];\r\n                        // Wildcard in the end\r\n                        if ((later == \"\") || (later == \" \")) {\r\n                            if ((voz.indexOf(before) != -1) || ((voz.toLowerCase()).indexOf(before.toLowerCase()) != -1)) {\r\n                                wildy = voz.replace(before, '');\r\n                                wildy = (wildy.toLowerCase()).replace(before.toLowerCase(), '');\r\n                                encontrado = parseInt(c.toString());\r\n                            }\r\n                        }\r\n                        else {\r\n                            if ((voz.indexOf(before) != -1) || ((voz.toLowerCase()).indexOf(before.toLowerCase()) != -1)) {\r\n                                if ((voz.indexOf(later) != -1) || ((voz.toLowerCase()).indexOf(later.toLowerCase()) != -1)) {\r\n                                    wildy = voz.replace(before, '').replace(later, '');\r\n                                    wildy = (wildy.toLowerCase()).replace(before.toLowerCase(), '').replace(later.toLowerCase(), '');\r\n                                    wildy = (wildy.toLowerCase()).replace(later.toLowerCase(), '');\r\n                                    encontrado = parseInt(c.toString());\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.warn(\"Founded command marked as SMART but have no wildcard in the indexes, remove the SMART for prevent extensive memory consuming or add the wildcard *\");\r\n                    }\r\n                }\r\n                if ((encontrado >= 0)) {\r\n                    encontrado = parseInt(c.toString());\r\n                    break;\r\n                }\r\n            }\r\n            if (encontrado >= 0) {\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);\r\n                var response = {\r\n                    index: encontrado,\r\n                    instruction: instruction,\r\n                    wildcard: {\r\n                        item: wildy,\r\n                        full: voz\r\n                    }\r\n                };\r\n                return response;\r\n            }\r\n        } //End @3\r\n        /** @1\r\n         * Search for IDENTICAL matches in the commands if nothing matches\r\n         * start with a index match in commands\r\n         */\r\n        for (var i = 0; i < _this.ArtyomCommands.length; i++) {\r\n            var instruction = _this.ArtyomCommands[i];\r\n            var opciones = instruction.indexes;\r\n            var encontrado = -1;\r\n            /**\r\n             * Execution of match with identical commands\r\n             */\r\n            for (var c = 0; c < opciones.length; c++) {\r\n                var opcion = opciones[c];\r\n                if (instruction.smart) {\r\n                    continue; //Jump wildcard commands\r\n                }\r\n                if ((voz === opcion)) {\r\n                    _this.debug(\">> MATCHED FULL EXACT OPTION \" + opcion + \" AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                    encontrado = parseInt(c.toString());\r\n                    break;\r\n                }\r\n                else if ((voz.toLowerCase() === opcion.toLowerCase())) {\r\n                    _this.debug(\">> MATCHED OPTION CHANGING ALL TO LOWERCASE \" + opcion + \" AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                    encontrado = parseInt(c.toString());\r\n                    break;\r\n                }\r\n            }\r\n            if (encontrado >= 0) {\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);\r\n                var response = {\r\n                    index: encontrado,\r\n                    instruction: instruction\r\n                };\r\n                return response;\r\n            }\r\n        } //End @1\r\n        /**\r\n         * Step 3 Commands recognition.\r\n         * If the command is not smart, and any of the commands match exactly then try to find\r\n         * a command in all the quote.\r\n         */\r\n        for (var i = 0; i < _this.ArtyomCommands.length; i++) {\r\n            var instruction = _this.ArtyomCommands[i];\r\n            var opciones = instruction.indexes;\r\n            var encontrado = -1;\r\n            /**\r\n             * Execution of match with index\r\n             */\r\n            for (var c = 0; c < opciones.length; c++) {\r\n                if (instruction.smart) {\r\n                    continue; //Jump wildcard commands\r\n                }\r\n                var opcion = opciones[c];\r\n                if ((voz.indexOf(opcion) >= 0)) {\r\n                    _this.debug(\">> MATCHED INDEX EXACT OPTION \" + opcion + \" AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                    encontrado = parseInt(c.toString());\r\n                    break;\r\n                }\r\n                else if (((voz.toLowerCase()).indexOf(opcion.toLowerCase()) >= 0)) {\r\n                    _this.debug(\">> MATCHED INDEX OPTION CHANGING ALL TO LOWERCASE \" + opcion + \" AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                    encontrado = parseInt(c.toString());\r\n                    break;\r\n                }\r\n            }\r\n            if (encontrado >= 0) {\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);\r\n                var response = {\r\n                    index: encontrado,\r\n                    instruction: instruction\r\n                };\r\n                return response;\r\n            }\r\n        } //End Step 3\r\n        /**\r\n         * If the soundex options is enabled, proceed to process the commands in case that any of the previous\r\n         * ways of processing (exact, lowercase and command in quote) didn't match anything.\r\n         * Based on the soundex algorithm match a command if the spoken text is similar to any of the artyom commands.\r\n         * Example :\r\n         * If you have a command with \"Open Wallmart\" and \"Open Willmar\" is recognized, the open wallmart command will be triggered.\r\n         * soundex(\"Open Wallmart\") == soundex(\"Open Willmar\") <= true\r\n         *\r\n         */\r\n        if (_this.ArtyomProperties.soundex) {\r\n            for (var i = 0; i < _this.ArtyomCommands.length; i++) {\r\n                var instruction = _this.ArtyomCommands[i];\r\n                var opciones = instruction.indexes;\r\n                var encontrado = -1;\r\n                for (var c = 0; c < opciones.length; c++) {\r\n                    var opcion = opciones[c];\r\n                    if (instruction.smart) {\r\n                        continue; //Jump wildcard commands\r\n                    }\r\n                    if (_this.soundex(voz) == _this.soundex(opcion)) {\r\n                        _this.debug(\">> Matched Soundex command '\" + opcion + \"' AGAINST '\" + voz + \"' with index \" + c, \"info\");\r\n                        encontrado = parseInt(c.toString());\r\n                        _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);\r\n                        var response = {\r\n                            index: encontrado,\r\n                            instruction: instruction\r\n                        };\r\n                        return response;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.NOT_COMMAND_MATCHED);\r\n        _this.triggerEvent(_this.ArtyomGlobalEvents.NOT_COMMAND_MATCHED);\r\n        return;\r\n    };\r\n    /**\r\n     * Force artyom to stop listen even if is in continuos mode.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/fatality\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.fatality = function () {\r\n        var _this = this;\r\n        //fatalityPromiseCallback\r\n        return new Promise(function (resolve, reject) {\r\n            // Expose the fatality promise callback to the helpers object of Artyom.\r\n            // The promise isn't resolved here itself but in the onend callback of\r\n            // the speechRecognition instance of artyom\r\n            _this.ArtyomProperties.helpers.fatalityPromiseCallback = resolve;\r\n            try {\r\n                // If config is continuous mode, deactivate anyway.\r\n                _this.ArtyomFlags.restartRecognition = false;\r\n                _this.ArtyomWebkitSpeechRecognition.stop();\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Returns an array with all the available commands for artyom.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/getavailablecommands\r\n     * @readonly\r\n     * @returns {Array}\r\n     */\r\n    Artyom.prototype.getAvailableCommands = function () {\r\n        return this.ArtyomCommands;\r\n    };\r\n    /**\r\n     * Artyom can return inmediately the voices available in your browser.\r\n     *\r\n     * @readonly\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/getvoices\r\n     * @returns {Array}\r\n     */\r\n    Artyom.prototype.getVoices = function () {\r\n        return window.speechSynthesis.getVoices();\r\n    };\r\n    /**\r\n     * Verify if the browser supports speechSynthesis.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/speechsupported\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.speechSupported = function () {\r\n        return 'speechSynthesis' in window;\r\n    };\r\n    /**\r\n     * Verify if the browser supports webkitSpeechRecognition.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/recognizingsupported\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.recognizingSupported = function () {\r\n        return 'webkitSpeechRecognition' in window;\r\n    };\r\n    /**\r\n     * Stops the actual and pendings messages that artyom have to say.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/shutup\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.shutUp = function () {\r\n        if ('speechSynthesis' in window) {\r\n            do {\r\n                window.speechSynthesis.cancel();\r\n            } while (window.speechSynthesis.pending === true);\r\n        }\r\n        this.ArtyomProperties.speaking = false;\r\n        this.clearGarbageCollection();\r\n    };\r\n    /**\r\n     * Returns an object with the actual properties of artyom.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/getproperties\r\n     * @returns {object}\r\n     */\r\n    Artyom.prototype.getProperties = function () {\r\n        return this.ArtyomProperties;\r\n    };\r\n    /**\r\n     * Returns the code language of artyom according to initialize function.\r\n     * if initialize not used returns english GB.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/getlanguage\r\n     * @returns {String}\r\n     */\r\n    Artyom.prototype.getLanguage = function () {\r\n        return this.ArtyomProperties.lang;\r\n    };\r\n    /**\r\n     * Retrieves the used version of Artyom.js\r\n     *\r\n     * @returns {String}\r\n     */\r\n    Artyom.prototype.getVersion = function () {\r\n        return '1.0.6';\r\n    };\r\n    /**\r\n     * Artyom awaits for orders when this function\r\n     * is executed.\r\n     *\r\n     * If artyom gets a first parameter the instance will be stopped.\r\n     *\r\n     * @private\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.hey = function (resolve, reject) {\r\n        var start_timestamp;\r\n        var artyom_is_allowed;\r\n        var _this = this;\r\n        /**\r\n         * On mobile devices the recognized text is always thrown twice.\r\n         * By setting the following configuration, fixes the issue\r\n         */\r\n        if (this.Device.isMobile) {\r\n            this.ArtyomWebkitSpeechRecognition.continuous = false;\r\n            this.ArtyomWebkitSpeechRecognition.interimResults = false;\r\n            this.ArtyomWebkitSpeechRecognition.maxAlternatives = 1;\r\n        }\r\n        else {\r\n            this.ArtyomWebkitSpeechRecognition.continuous = true;\r\n            this.ArtyomWebkitSpeechRecognition.interimResults = true;\r\n        }\r\n        this.ArtyomWebkitSpeechRecognition.lang = this.ArtyomProperties.lang;\r\n        this.ArtyomWebkitSpeechRecognition.onstart = function () {\r\n            _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.COMMAND_RECOGNITION_START);\r\n            _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_START);\r\n            _this.ArtyomProperties.recognizing = true;\r\n            artyom_is_allowed = true;\r\n            resolve();\r\n        };\r\n        /**\r\n         * Handle all artyom posible exceptions\r\n         *\r\n         * @param {type} event\r\n         * @returns {undefined}\r\n         */\r\n        this.ArtyomWebkitSpeechRecognition.onerror = function (event) {\r\n            // Reject promise on initialization\r\n            reject(event.error);\r\n            // Dispath error globally (artyom.when)\r\n            _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {\r\n                code: event.error\r\n            });\r\n            if (event.error == 'audio-capture') {\r\n                artyom_is_allowed = false;\r\n            }\r\n            if (event.error == 'not-allowed') {\r\n                artyom_is_allowed = false;\r\n                if (event.timeStamp - start_timestamp < 100) {\r\n                    _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {\r\n                        code: \"info-blocked\",\r\n                        message: \"Artyom needs the permision of the microphone, is blocked.\"\r\n                    });\r\n                }\r\n                else {\r\n                    _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {\r\n                        code: \"info-denied\",\r\n                        message: \"Artyom needs the permision of the microphone, is denied\"\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Check if continuous mode is active and restart the recognition.\r\n         * Throw events too.\r\n         *\r\n         * @returns {undefined}\r\n         */\r\n        _this.ArtyomWebkitSpeechRecognition.onend = function () {\r\n            if (_this.ArtyomFlags.restartRecognition === true) {\r\n                if (artyom_is_allowed === true) {\r\n                    _this.ArtyomWebkitSpeechRecognition.start();\r\n                    _this.debug(\"Continuous mode enabled, restarting\", \"info\");\r\n                }\r\n                else {\r\n                    console.error(\"Verify the microphone and check for the table of errors in sdkcarlos.github.io/sites/artyom.html to solve your problem. If you want to give your user a message when an error appears add an artyom listener\");\r\n                }\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END, {\r\n                    code: \"continuous_mode_enabled\",\r\n                    message: \"OnEnd event reached with continuous mode\"\r\n                });\r\n            }\r\n            else {\r\n                // If the fatality promise callback was set, invoke it\r\n                if (_this.ArtyomProperties.helpers.fatalityPromiseCallback) {\r\n                    // As the speech recognition doesn't finish really, wait 500ms\r\n                    // to trigger the real fatality callback\r\n                    setTimeout(function () {\r\n                        _this.ArtyomProperties.helpers.fatalityPromiseCallback();\r\n                    }, 500);\r\n                    _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END, {\r\n                        code: \"continuous_mode_disabled\",\r\n                        message: \"OnEnd event reached without continuous mode\"\r\n                    });\r\n                }\r\n            }\r\n            _this.ArtyomProperties.recognizing = false;\r\n        };\r\n        /**\r\n         * Declare the processor dinamycally according to the mode of artyom\r\n         * to increase the performance.\r\n         *\r\n         * @type {Function}\r\n         * @return\r\n         */\r\n        var onResultProcessor;\r\n        // Process the recognition in normal mode\r\n        if (_this.ArtyomProperties.mode == \"normal\") {\r\n            onResultProcessor = function (event) {\r\n                if (!_this.ArtyomCommands.length) {\r\n                    _this.debug(\"No commands to process in normal mode.\");\r\n                    return;\r\n                }\r\n                var cantidadResultados = event.results.length;\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.TEXT_RECOGNIZED);\r\n                for (var i = event.resultIndex; i < cantidadResultados; ++i) {\r\n                    var identificated = event.results[i][0].transcript;\r\n                    if (event.results[i].isFinal) {\r\n                        var comando = _this.execute(identificated.trim());\r\n                        // Redirect the output of the text if necessary\r\n                        if (typeof (_this.ArtyomProperties.helpers.redirectRecognizedTextOutput) === \"function\") {\r\n                            _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, true);\r\n                        }\r\n                        if ((comando) && (_this.ArtyomProperties.recognizing == true)) {\r\n                            _this.debug(\"<< Executing Matching Recognition in normal mode >>\", \"info\");\r\n                            _this.ArtyomWebkitSpeechRecognition.stop();\r\n                            _this.ArtyomProperties.recognizing = false;\r\n                            // Execute the command if smart\r\n                            if (comando.wildcard) {\r\n                                comando.instruction.action(comando.index, comando.wildcard.item, comando.wildcard.full);\r\n                                // Execute a normal command\r\n                            }\r\n                            else {\r\n                                comando.instruction.action(comando.index);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Redirect output when necesary\r\n                        if (typeof (_this.ArtyomProperties.helpers.redirectRecognizedTextOutput) === \"function\") {\r\n                            _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, false);\r\n                        }\r\n                        if (typeof (_this.ArtyomProperties.executionKeyword) === \"string\") {\r\n                            if (identificated.indexOf(_this.ArtyomProperties.executionKeyword) != -1) {\r\n                                var comando = _this.execute(identificated.replace(_this.ArtyomProperties.executionKeyword, '').trim());\r\n                                if ((comando) && (_this.ArtyomProperties.recognizing == true)) {\r\n                                    _this.debug(\"<< Executing command ordered by ExecutionKeyword >>\", 'info');\r\n                                    _this.ArtyomWebkitSpeechRecognition.stop();\r\n                                    _this.ArtyomProperties.recognizing = false;\r\n                                    //Executing Command Action\r\n                                    if (comando.wildcard) {\r\n                                        comando.instruction.action(comando.index, comando.wildcard.item, comando.wildcard.full);\r\n                                    }\r\n                                    else {\r\n                                        comando.instruction.action(comando.index);\r\n                                    }\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        _this.debug(\"Normal mode : \" + identificated);\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        // Process the recognition in quick mode\r\n        if (_this.ArtyomProperties.mode == \"quick\") {\r\n            onResultProcessor = function (event) {\r\n                if (!_this.ArtyomCommands.length) {\r\n                    _this.debug(\"No commands to process.\");\r\n                    return;\r\n                }\r\n                var cantidadResultados = event.results.length;\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.TEXT_RECOGNIZED);\r\n                for (var i = event.resultIndex; i < cantidadResultados; ++i) {\r\n                    var identificated = event.results[i][0].transcript;\r\n                    if (!event.results[i].isFinal) {\r\n                        var comando = _this.execute(identificated.trim());\r\n                        //Redirect output when necesary\r\n                        if (typeof (_this.ArtyomProperties.helpers.redirectRecognizedTextOutput) === \"function\") {\r\n                            _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, true);\r\n                        }\r\n                        if ((comando) && (_this.ArtyomProperties.recognizing == true)) {\r\n                            _this.debug(\"<< Executing Matching Recognition in quick mode >>\", \"info\");\r\n                            _this.ArtyomWebkitSpeechRecognition.stop();\r\n                            _this.ArtyomProperties.recognizing = false;\r\n                            //Executing Command Action\r\n                            if (comando.wildcard) {\r\n                                comando.instruction.action(comando.index, comando.wildcard.item);\r\n                            }\r\n                            else {\r\n                                comando.instruction.action(comando.index);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        var comando = _this.execute(identificated.trim());\r\n                        //Redirect output when necesary\r\n                        if (typeof (_this.ArtyomProperties.helpers.redirectRecognizedTextOutput) === \"function\") {\r\n                            _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, false);\r\n                        }\r\n                        if ((comando) && (_this.ArtyomProperties.recognizing == true)) {\r\n                            _this.debug(\"<< Executing Matching Recognition in quick mode >>\", \"info\");\r\n                            _this.ArtyomWebkitSpeechRecognition.stop();\r\n                            _this.ArtyomProperties.recognizing = false;\r\n                            //Executing Command Action\r\n                            if (comando.wildcard) {\r\n                                comando.instruction.action(comando.index, comando.wildcard.item);\r\n                            }\r\n                            else {\r\n                                comando.instruction.action(comando.index);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    _this.debug(\"Quick mode : \" + identificated);\r\n                }\r\n            };\r\n        }\r\n        // Process the recognition in remote mode\r\n        if (_this.ArtyomProperties.mode == \"remote\") {\r\n            onResultProcessor = function (event) {\r\n                var cantidadResultados = event.results.length;\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.TEXT_RECOGNIZED);\r\n                if (typeof (_this.ArtyomProperties.helpers.remoteProcessorHandler) !== \"function\") {\r\n                    return _this.debug(\"The remoteProcessorService is undefined.\", \"warn\");\r\n                }\r\n                for (var i = event.resultIndex; i < cantidadResultados; ++i) {\r\n                    var identificated = event.results[i][0].transcript;\r\n                    _this.ArtyomProperties.helpers.remoteProcessorHandler({\r\n                        text: identificated,\r\n                        isFinal: event.results[i].isFinal\r\n                    });\r\n                }\r\n            };\r\n        }\r\n        /**\r\n         * Process the recognition event with the previously\r\n         * declared processor function.\r\n         *\r\n         * @param {type} event\r\n         * @returns {undefined}\r\n         */\r\n        _this.ArtyomWebkitSpeechRecognition.onresult = function (event) {\r\n            if (_this.ArtyomProperties.obeying) {\r\n                onResultProcessor(event);\r\n            }\r\n            else {\r\n                // Handle obeyKeyword if exists and artyom is not obeying\r\n                if (!_this.ArtyomProperties.obeyKeyword) {\r\n                    return;\r\n                }\r\n                var temporal = \"\";\r\n                var interim = \"\";\r\n                for (var i = 0; i < event.results.length; ++i) {\r\n                    if (event.results[i].isFinal) {\r\n                        temporal += event.results[i][0].transcript;\r\n                    }\r\n                    else {\r\n                        interim += event.results[i][0].transcript;\r\n                    }\r\n                }\r\n                _this.debug(\"Artyom is not obeying\", \"warn\");\r\n                // If the obeyKeyword is found in the recognized text\r\n                // enable command recognition again\r\n                if (((interim).indexOf(_this.ArtyomProperties.obeyKeyword) > -1) || (temporal).indexOf(_this.ArtyomProperties.obeyKeyword) > -1) {\r\n                    _this.ArtyomProperties.obeying = true;\r\n                }\r\n            }\r\n        };\r\n        if (_this.ArtyomProperties.recognizing) {\r\n            _this.ArtyomWebkitSpeechRecognition.stop();\r\n            _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END);\r\n            _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END);\r\n        }\r\n        else {\r\n            try {\r\n                _this.ArtyomWebkitSpeechRecognition.start();\r\n            }\r\n            catch (e) {\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {\r\n                    code: \"recognition_overlap\",\r\n                    message: \"A webkitSpeechRecognition instance has been started while there's already running. Is recommendable to restart the Browser\"\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Set up artyom for the application.\r\n     *\r\n     * This function will set the default language used by artyom\r\n     * or notice the user if artyom is not supported in the actual\r\n     * browser\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/initialize\r\n     * @param {Object} config\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.initialize = function (config) {\r\n        var _this = this;\r\n        if (typeof (config) !== \"object\") {\r\n            return Promise.reject(\"You must give the configuration for start artyom properly.\");\r\n        }\r\n        if (config.hasOwnProperty(\"lang\")) {\r\n            _this.ArtyomVoice = _this.getVoice(config.lang);\r\n            _this.ArtyomProperties.lang = config.lang;\r\n        }\r\n        if (config.hasOwnProperty(\"continuous\")) {\r\n            if (config.continuous) {\r\n                this.ArtyomProperties.continuous = true;\r\n                this.ArtyomFlags.restartRecognition = true;\r\n            }\r\n            else {\r\n                this.ArtyomProperties.continuous = false;\r\n                this.ArtyomFlags.restartRecognition = false;\r\n            }\r\n        }\r\n        if (config.hasOwnProperty(\"speed\")) {\r\n            this.ArtyomProperties.speed = config.speed;\r\n        }\r\n        if (config.hasOwnProperty(\"soundex\")) {\r\n            this.ArtyomProperties.soundex = config.soundex;\r\n        }\r\n        if (config.hasOwnProperty(\"executionKeyword\")) {\r\n            this.ArtyomProperties.executionKeyword = config.executionKeyword;\r\n        }\r\n        if (config.hasOwnProperty(\"obeyKeyword\")) {\r\n            this.ArtyomProperties.obeyKeyword = config.obeyKeyword;\r\n        }\r\n        if (config.hasOwnProperty(\"volume\")) {\r\n            this.ArtyomProperties.volume = config.volume;\r\n        }\r\n        if (config.hasOwnProperty(\"listen\")) {\r\n            this.ArtyomProperties.listen = config.listen;\r\n        }\r\n        if (config.hasOwnProperty(\"name\")) {\r\n            this.ArtyomProperties.name = config.name;\r\n        }\r\n        if (config.hasOwnProperty(\"debug\")) {\r\n            this.ArtyomProperties.debug = config.debug;\r\n        }\r\n        else {\r\n            console.warn(\"The initialization doesn't provide how the debug mode should be handled. Is recommendable to set this value either to true or false.\");\r\n        }\r\n        if (config.mode) {\r\n            this.ArtyomProperties.mode = config.mode;\r\n        }\r\n        if (this.ArtyomProperties.listen === true) {\r\n            return new Promise(function (resolve, reject) {\r\n                _this.hey(resolve, reject);\r\n            });\r\n        }\r\n        return Promise.resolve(true);\r\n    };\r\n    /**\r\n     * Add commands like an artisan. If you use artyom for simple tasks\r\n     * then probably you don't like to write a lot to achieve it.\r\n     *\r\n     * Use the artisan syntax to write less, but with the same accuracy.\r\n     *\r\n     * @disclaimer Not a promise-based implementation, just syntax.\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.on = function (indexes, smart) {\r\n        var _this = this;\r\n        return {\r\n            then: function (action) {\r\n                var command = {\r\n                    indexes: indexes,\r\n                    action: action\r\n                };\r\n                if (smart) {\r\n                    command.smart = true;\r\n                }\r\n                _this.addCommands(command);\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Generates an artyom event with the designed name\r\n     *\r\n     * @param {type} name\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.triggerEvent = function (name, param) {\r\n        var event = new CustomEvent(name, {\r\n            'detail': param\r\n        });\r\n        document.dispatchEvent(event);\r\n        return event;\r\n    };\r\n    /**\r\n     * Repeats the last sentence that artyom said.\r\n     * Useful in noisy environments.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/repeatlastsay\r\n     * @param {Boolean} returnObject If set to true, an object with the text and the timestamp when was executed will be returned.\r\n     * @returns {Object}\r\n     */\r\n    Artyom.prototype.repeatLastSay = function (returnObject) {\r\n        var last = this.ArtyomProperties.helpers.lastSay;\r\n        if (returnObject) {\r\n            return last;\r\n        }\r\n        else {\r\n            if (last != null) {\r\n                this.say(last.text);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Create a listener when an artyom action is called.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/when\r\n     * @param {type} event\r\n     * @param {type} action\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.when = function (event, action) {\r\n        return document.addEventListener(event, function (e) {\r\n            action(e[\"detail\"]);\r\n        }, false);\r\n    };\r\n    /**\r\n     * Process the recognized text if artyom is active in remote mode.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.remoteProcessorService = function (action) {\r\n        this.ArtyomProperties.helpers.remoteProcessorHandler = action;\r\n        return true;\r\n    };\r\n    /**\r\n     * Verify if there's a voice available for a language using its language code identifier.\r\n     *\r\n     * @return {Boolean}\r\n     */\r\n    Artyom.prototype.voiceAvailable = function (languageCode) {\r\n        return typeof (this.getVoice(languageCode)) !== \"undefined\";\r\n    };\r\n    /**\r\n     * A boolean to check if artyom is obeying commands or not.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.isObeying = function () {\r\n        return this.ArtyomProperties.obeying;\r\n    };\r\n    /**\r\n     * Allow artyom to obey commands again.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.obey = function () {\r\n        return this.ArtyomProperties.obeying = true;\r\n    };\r\n    /**\r\n     * Pause the processing of commands. Artyom still listening in the background and it can be resumed after a couple of seconds.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.dontObey = function () {\r\n        return this.ArtyomProperties.obeying = false;\r\n    };\r\n    /**\r\n     * This function returns a boolean according to the speechSynthesis status\r\n     * if artyom is speaking, will return true.\r\n     *\r\n     * Note: This is not a feature of speechSynthesis, therefore this value hangs on\r\n     * the fiability of the onStart and onEnd events of the speechSynthesis\r\n     *\r\n     * @since 0.9.3\r\n     * @summary Returns true if speechSynthesis is active\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.isSpeaking = function () {\r\n        return this.ArtyomProperties.speaking;\r\n    };\r\n    /**\r\n     * This function returns a boolean according to the SpeechRecognition status\r\n     * if artyom is listening, will return true.\r\n     *\r\n     * Note: This is not a feature of SpeechRecognition, therefore this value hangs on\r\n     * the fiability of the onStart and onEnd events of the SpeechRecognition\r\n     *\r\n     * @since 0.9.3\r\n     * @summary Returns true if SpeechRecognition is active\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.isRecognizing = function () {\r\n        return this.ArtyomProperties.recognizing;\r\n    };\r\n    /**\r\n     * This function will return the webkitSpeechRecognition object used by artyom\r\n     * retrieve it only to debug on it or get some values, do not make changes directly\r\n     *\r\n     * @readonly\r\n     * @since 0.9.2\r\n     * @summary Retrieve the native webkitSpeechRecognition object\r\n     * @returns {Object webkitSpeechRecognition}\r\n     */\r\n    Artyom.prototype.getNativeApi = function () {\r\n        return this.ArtyomWebkitSpeechRecognition;\r\n    };\r\n    /**\r\n     * Returns the SpeechSynthesisUtterance garbageobjects.\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    Artyom.prototype.getGarbageCollection = function () {\r\n        return this.ArtyomGarbageCollection;\r\n    };\r\n    /**\r\n     *  Retrieve a single voice of the browser by it's language code.\r\n     *  It will return the first voice available for the language on every device.\r\n     *\r\n     * @param languageCode\r\n     */\r\n    Artyom.prototype.getVoice = function (languageCode) {\r\n        var voiceIdentifiersArray = this.ArtyomVoicesIdentifiers[languageCode];\r\n        if (!voiceIdentifiersArray) {\r\n            console.warn(\"The providen language \" + languageCode + \" isn't available, using English Great britain as default\");\r\n            voiceIdentifiersArray = this.ArtyomVoicesIdentifiers[\"en-GB\"];\r\n        }\r\n        var voice = undefined;\r\n        var voices = speechSynthesis.getVoices();\r\n        var voicesLength = voiceIdentifiersArray.length;\r\n        var _loop_1 = function (i) {\r\n            var foundVoice = voices.filter(function (voice) {\r\n                return ((voice.name == voiceIdentifiersArray[i]) || (voice.lang == voiceIdentifiersArray[i]));\r\n            })[0];\r\n            if (foundVoice) {\r\n                voice = foundVoice;\r\n                return \"break\";\r\n            }\r\n        };\r\n        for (var i = 0; i < voicesLength; i++) {\r\n            var state_1 = _loop_1(i);\r\n            if (state_1 === \"break\")\r\n                break;\r\n        }\r\n        return voice;\r\n    };\r\n    /**\r\n     * Artyom provide an easy way to create a\r\n     * dictation for your user.\r\n     *\r\n     * Just create an instance and start and stop when you want\r\n     *\r\n     * @returns Object | newDictation\r\n     */\r\n    Artyom.prototype.newDictation = function (settings) {\r\n        var _this = this;\r\n        if (!_this.recognizingSupported()) {\r\n            console.error(\"SpeechRecognition is not supported in this browser\");\r\n            return false;\r\n        }\r\n        var dictado = new window.webkitSpeechRecognition();\r\n        dictado.continuous = true;\r\n        dictado.interimResults = true;\r\n        dictado.lang = _this.ArtyomProperties.lang;\r\n        dictado.onresult = function (event) {\r\n            var temporal = \"\";\r\n            var interim = \"\";\r\n            for (var i = 0; i < event.results.length; ++i) {\r\n                if (event.results[i].isFinal) {\r\n                    temporal += event.results[i][0].transcript;\r\n                }\r\n                else {\r\n                    interim += event.results[i][0].transcript;\r\n                }\r\n            }\r\n            if (settings.onResult) {\r\n                settings.onResult(interim, temporal);\r\n            }\r\n        };\r\n        return new function () {\r\n            var dictation = dictado;\r\n            var flagStartCallback = true;\r\n            var flagRestart = false;\r\n            this.onError = null;\r\n            this.start = function () {\r\n                if (settings.continuous === true) {\r\n                    flagRestart = true;\r\n                }\r\n                dictation.onstart = function () {\r\n                    if (typeof (settings.onStart) === \"function\") {\r\n                        if (flagStartCallback === true) {\r\n                            settings.onStart();\r\n                        }\r\n                    }\r\n                };\r\n                dictation.onend = function () {\r\n                    if (flagRestart === true) {\r\n                        flagStartCallback = false;\r\n                        dictation.start();\r\n                    }\r\n                    else {\r\n                        flagStartCallback = true;\r\n                        if (typeof (settings.onEnd) === \"function\") {\r\n                            settings.onEnd();\r\n                        }\r\n                    }\r\n                };\r\n                dictation.start();\r\n            };\r\n            this.stop = function () {\r\n                flagRestart = false;\r\n                dictation.stop();\r\n            };\r\n            if (typeof (settings.onError) === \"function\") {\r\n                dictation.onerror = settings.onError;\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * A voice prompt will be executed.\r\n     *\r\n     * @param {type} config\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.newPrompt = function (config) {\r\n        if (typeof (config) !== \"object\") {\r\n            console.error(\"Expected the prompt configuration.\");\r\n        }\r\n        var copyActualCommands = Object.assign([], this.ArtyomCommands);\r\n        var _this = this;\r\n        this.emptyCommands();\r\n        var promptCommand = {\r\n            description: \"Setting the artyom commands only for the prompt. The commands will be restored after the prompt finishes\",\r\n            indexes: config.options,\r\n            action: function (i, wildcard) {\r\n                _this.ArtyomCommands = copyActualCommands;\r\n                var toExe = config.onMatch(i, wildcard);\r\n                if (typeof (toExe) !== \"function\") {\r\n                    console.error(\"onMatch function expects a returning function to be executed\");\r\n                    return;\r\n                }\r\n                toExe();\r\n            }\r\n        };\r\n        if (config.smart) {\r\n            promptCommand.smart = true;\r\n        }\r\n        this.addCommands(promptCommand);\r\n        if (typeof (config.beforePrompt) !== \"undefined\") {\r\n            config.beforePrompt();\r\n        }\r\n        var callbacks = {\r\n            onStart: function () {\r\n                if (typeof (config.onStartPrompt) !== \"undefined\") {\r\n                    config.onStartPrompt();\r\n                }\r\n            },\r\n            onEnd: function () {\r\n                if (typeof (config.onEndPrompt) !== \"undefined\") {\r\n                    config.onEndPrompt();\r\n                }\r\n            }\r\n        };\r\n        this.say(config.question, callbacks);\r\n    };\r\n    /**\r\n     * Says a random quote and returns it's object\r\n     *\r\n     * @param {type} data\r\n     * @returns {object}\r\n     */\r\n    Artyom.prototype.sayRandom = function (data) {\r\n        if (data instanceof Array) {\r\n            var index = Math.floor(Math.random() * data.length);\r\n            this.say(data[index]);\r\n            return {\r\n                text: data[index],\r\n                index: index\r\n            };\r\n        }\r\n        else {\r\n            console.error(\"Random quotes must be in an array !\");\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Shortcut method to enable the artyom debug on the fly.\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    Artyom.prototype.setDebug = function (status) {\r\n        if (status) {\r\n            return this.ArtyomProperties.debug = true;\r\n        }\r\n        else {\r\n            return this.ArtyomProperties.debug = false;\r\n        }\r\n    };\r\n    /**\r\n     * Simulate a voice command via JS\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/simulateinstruction\r\n     * @param {type} sentence\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.simulateInstruction = function (sentence) {\r\n        var _this = this;\r\n        if ((!sentence) || (typeof (sentence) !== \"string\")) {\r\n            console.warn(\"Cannot execute a non string command\");\r\n            return false;\r\n        }\r\n        var foundCommand = _this.execute(sentence); //Command founded object\r\n        if (typeof (foundCommand) === \"object\") {\r\n            if (foundCommand.instruction) {\r\n                if (foundCommand.instruction.smart) {\r\n                    _this.debug('Smart command matches with simulation, executing', \"info\");\r\n                    foundCommand.instruction.action(foundCommand.index, foundCommand.wildcard.item, foundCommand.wildcard.full);\r\n                }\r\n                else {\r\n                    _this.debug('Command matches with simulation, executing', \"info\");\r\n                    foundCommand.instruction.action(foundCommand.index); //Execute Normal command\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            console.warn(\"No command founded trying with \" + sentence);\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Javascript implementation of the soundex algorithm.\r\n     * @see https://gist.github.com/shawndumas/1262659\r\n     * @returns {String}\r\n     */\r\n    Artyom.prototype.soundex = function (s) {\r\n        var a = s.toLowerCase().split('');\r\n        var f = a.shift();\r\n        var r = '';\r\n        var codes = { a: \"\", e: \"\", i: \"\", o: \"\", u: \"\", b: 1, f: 1, p: 1, v: 1, c: 2, g: 2, j: 2, k: 2, q: 2, s: 2, x: 2, z: 2, d: 3, t: 3, l: 4, m: 5, n: 5, r: 6 };\r\n        r = f + a\r\n            .map(function (v, i, a) {\r\n            return codes[v];\r\n        })\r\n            .filter(function (v, i, a) {\r\n            return ((i === 0) ? v !== codes[f] : v !== a[i - 1]);\r\n        })\r\n            .join('');\r\n        return (r + '000').slice(0, 4).toUpperCase();\r\n    };\r\n    /**\r\n     * Splits a string into an array of strings with a limited size (chunk_length).\r\n     *\r\n     * @param {String} input text to split into chunks\r\n     * @param {Integer} chunk_length limit of characters in every chunk\r\n     */\r\n    Artyom.prototype.splitStringByChunks = function (input, chunk_length) {\r\n        input = input || \"\";\r\n        chunk_length = chunk_length || 100;\r\n        var curr = chunk_length;\r\n        var prev = 0;\r\n        var output = [];\r\n        while (input[curr]) {\r\n            if (input[curr++] == ' ') {\r\n                output.push(input.substring(prev, curr));\r\n                prev = curr;\r\n                curr += chunk_length;\r\n            }\r\n        }\r\n        output.push(input.substr(prev));\r\n        return output;\r\n    };\r\n    /**\r\n     * Allows to retrieve the recognized spoken text of artyom\r\n     * and do something with it everytime something is recognized\r\n     *\r\n     * @param {String} action\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.redirectRecognizedTextOutput = function (action) {\r\n        if (typeof (action) != \"function\") {\r\n            console.warn(\"Expected function to handle the recognized text ...\");\r\n            return false;\r\n        }\r\n        this.ArtyomProperties.helpers.redirectRecognizedTextOutput = action;\r\n        return true;\r\n    };\r\n    /**\r\n     * Restarts artyom with the initial configuration.\r\n     *\r\n     * @param configuration\r\n     */\r\n    Artyom.prototype.restart = function () {\r\n        var _this = this;\r\n        var _copyInit = _this.ArtyomProperties;\r\n        return new Promise(function (resolve, reject) {\r\n            _this.fatality().then(function () {\r\n                _this.initialize(_copyInit).then(resolve, reject);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Talks a text according to the given parameters.\r\n     *\r\n     * @private This function is only to be used internally.\r\n     * @param {String} text Text to be spoken\r\n     * @param {Int} actualChunk Number of chunk of the\r\n     * @param {Int} totalChunks\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.talk = function (text, actualChunk, totalChunks, callbacks) {\r\n        var _this = this;\r\n        var msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        msg.volume = this.ArtyomProperties.volume;\r\n        msg.rate = this.ArtyomProperties.speed;\r\n        // Select the voice according to the selected\r\n        var availableVoice = _this.getVoice(_this.ArtyomProperties.lang);\r\n        if (callbacks) {\r\n            // If the language to speak has been forced, use it\r\n            if (callbacks.hasOwnProperty(\"lang\")) {\r\n                availableVoice = _this.getVoice(callbacks.lang);\r\n            }\r\n        }\r\n        // If is a mobile device, provide only the language code in the lang property i.e \"es_ES\"\r\n        if (this.Device.isMobile) {\r\n            // Try to set the voice only if exists, otherwise don't use anything to use the native voice\r\n            if (availableVoice) {\r\n                msg.lang = availableVoice.lang;\r\n            }\r\n            // If browser provide the entire object\r\n        }\r\n        else {\r\n            msg.voice = availableVoice;\r\n        }\r\n        // If is first text chunk (onStart)\r\n        if (actualChunk == 1) {\r\n            msg.addEventListener('start', function () {\r\n                // Set artyom is talking\r\n                _this.ArtyomProperties.speaking = true;\r\n                // Trigger the onSpeechSynthesisStart event\r\n                _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_START);\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_START);\r\n                // Trigger the onStart callback if exists\r\n                if (callbacks) {\r\n                    if (typeof (callbacks.onStart) == \"function\") {\r\n                        callbacks.onStart.call(msg);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        // If is final text chunk (onEnd)\r\n        if ((actualChunk) >= totalChunks) {\r\n            msg.addEventListener('end', function () {\r\n                // Set artyom is talking\r\n                _this.ArtyomProperties.speaking = false;\r\n                // Trigger the onSpeechSynthesisEnd event\r\n                _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_END);\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_END);\r\n                // Trigger the onEnd callback if exists.\r\n                if (callbacks) {\r\n                    if (typeof (callbacks.onEnd) == \"function\") {\r\n                        callbacks.onEnd.call(msg);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        // Notice how many chunks were processed for the given text.\r\n        this.debug((actualChunk) + \" text chunk processed succesfully out of \" + totalChunks);\r\n        // Important : Save the SpeechSynthesisUtterance object in memory, otherwise it will get lost\r\n        this.ArtyomGarbageCollection.push(msg);\r\n        window.speechSynthesis.speak(msg);\r\n    };\r\n    /**\r\n     * Process the given text into chunks and execute the private function talk\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/say\r\n     * @param {String} message Text to be spoken\r\n     * @param {Object} callbacks\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.say = function (message, callbacks) {\r\n        var artyom_say_max_chunk_length = 115;\r\n        var _this = this;\r\n        var definitive = [];\r\n        if (this.speechSupported()) {\r\n            if (typeof (message) != 'string') {\r\n                return console.warn(\"Artyom expects a string to speak \" + typeof message + \" given\");\r\n            }\r\n            if (!message.length) {\r\n                return console.warn(\"Cannot speak empty string\");\r\n            }\r\n            // If the providen text is long, proceed to split it\r\n            if (message.length > artyom_say_max_chunk_length) {\r\n                // Split the given text by pause reading characters [\",\",\":\",\";\",\". \"] to provide a natural reading feeling.\r\n                var naturalReading = message.split(/,|:|\\. |;/);\r\n                naturalReading.forEach(function (chunk, index) {\r\n                    // If the sentence is too long and could block the API, split it to prevent any errors.\r\n                    if (chunk.length > artyom_say_max_chunk_length) {\r\n                        // Process the providen string into strings (withing an array) of maximum aprox. 115 characters to prevent any error with the API.\r\n                        var temp_processed = _this.splitStringByChunks(chunk, artyom_say_max_chunk_length);\r\n                        // Add items of the processed sentence into the definitive chunk.\r\n                        definitive.push.apply(definitive, temp_processed);\r\n                    }\r\n                    else {\r\n                        // Otherwise just add the sentence to being spoken.\r\n                        definitive.push(chunk);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                definitive.push(message);\r\n            }\r\n            // Clean any empty item in array\r\n            definitive = definitive.filter(function (e) { return e; });\r\n            // Finally proceed to talk the chunks and assign the callbacks.\r\n            definitive.forEach(function (chunk, index) {\r\n                var numberOfChunk = (index + 1);\r\n                if (chunk) {\r\n                    _this.talk(chunk, numberOfChunk, definitive.length, callbacks);\r\n                }\r\n            });\r\n            // Save the spoken text into the lastSay object of artyom\r\n            _this.ArtyomProperties.helpers.lastSay = {\r\n                text: message,\r\n                date: new Date()\r\n            };\r\n        }\r\n    };\r\n    return Artyom;\r\n}());\r\nexports[\"default\"] = Artyom;\r\n\n\n//# sourceURL=webpack://xiangqi/./node_modules/_artyom.js@1.0.6@artyom.js/build/artyom.js?");

/***/ }),

/***/ "./node_modules/_events@3.3.0@events/events.js":
/*!*****************************************************!*\
  !*** ./node_modules/_events@3.3.0@events/events.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n\n\n//# sourceURL=webpack://xiangqi/./node_modules/_events@3.3.0@events/events.js?");

/***/ }),

/***/ "./assets/sounds/startRecording.wav":
/*!******************************************!*\
  !*** ./assets/sounds/startRecording.wav ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"62479e6d4c050c5e38a58349efeca875.wav\");\n\n//# sourceURL=webpack://xiangqi/./assets/sounds/startRecording.wav?");

/***/ }),

/***/ "./src/MovedRecord.js":
/*!****************************!*\
  !*** ./src/MovedRecord.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MovedRecord\": () => (/* binding */ MovedRecord)\n/* harmony export */ });\n/* harmony import */ var _constantTable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constantTable */ \"./src/constantTable.js\");\n\r\n\r\nconst reg = new RegExp(`\r\n(${_constantTable__WEBPACK_IMPORTED_MODULE_0__.PIECES.join(\"|\")})\r\n(${_constantTable__WEBPACK_IMPORTED_MODULE_0__.CHINESE_NUMERALS.join(\"|\")})\r\n(${_constantTable__WEBPACK_IMPORTED_MODULE_0__.MOVE_DIRECTIONS.join(\"|\")})\r\n(${_constantTable__WEBPACK_IMPORTED_MODULE_0__.CHINESE_NUMERALS.join(\"|\")})\r\n|\r\n(${_constantTable__WEBPACK_IMPORTED_MODULE_0__.PREFIXES.join(\"|\")})\r\n(${_constantTable__WEBPACK_IMPORTED_MODULE_0__.PIECES.join(\"|\")})\r\n(${_constantTable__WEBPACK_IMPORTED_MODULE_0__.MOVE_DIRECTIONS.join(\"|\")})\r\n(${_constantTable__WEBPACK_IMPORTED_MODULE_0__.CHINESE_NUMERALS.join(\"|\")})\r\n`.replace(/\\n/g, \"\"), \"g\");\r\n\r\n/**\r\n * 提取合法命令-已弃用\r\n * @param {String} rawCommand 原始命令\r\n * @returns {String} 提取成功返回合法命令，否则返回空串\r\n */\r\nfunction extractCommand(rawCommand) {\r\n\t//过滤中文标点\r\n\tlet command = rawCommand.replace(/[。；，：“”（）、？！《》]/g, \"\");\r\n\t//查找最后一个合法命令\r\n\tcommand = command.match(reg)?.pop();\r\n\treturn command || \"\";\r\n}\r\n\r\n\r\n/**\r\n * 走棋信息记录\r\n */\r\nclass MovedRecord {\r\n\t/**\r\n\t * @param {String} commandText 着法文本\r\n\t * @param {Boolean} isRed 是否红方\r\n\t */\r\n\tconstructor(commandText, isRed) {\r\n\t\tthis.color = isRed ? \"r\" : \"b\";\r\n\t\tthis._parse(commandText);\r\n\t}\r\n\r\n\t//解析招法\r\n\t_parse(command) {\r\n\t\tif (_constantTable__WEBPACK_IMPORTED_MODULE_0__.PREFIXES.includes(command[0])) {\r\n\t\t\tthis.prefix = _constantTable__WEBPACK_IMPORTED_MODULE_0__.MAP_OF_PREFIXES_TO_CODES[command[0]];\r\n\t\t\tthis.piece = _constantTable__WEBPACK_IMPORTED_MODULE_0__.MAP_OF_PIECES_TO_CODES[command[1]];\r\n\t\t} else {\r\n\t\t\tthis.piece = _constantTable__WEBPACK_IMPORTED_MODULE_0__.MAP_OF_PIECES_TO_CODES[command[0]];\r\n\t\t\tthis.location = _constantTable__WEBPACK_IMPORTED_MODULE_0__.MAP_OF_CHINESE_NUMERALS_TO_CODES[command[1]];\r\n\t\t}\r\n\t\tthis.moveDirection = _constantTable__WEBPACK_IMPORTED_MODULE_0__.MAP_OF_MOVE_DIRECTIONS_TO_CODES[command[2]];\r\n\t\tthis.moveRange = _constantTable__WEBPACK_IMPORTED_MODULE_0__.MAP_OF_CHINESE_NUMERALS_TO_CODES[command[3]];\r\n\t}\r\n\r\n\t/**\r\n\t * 将走棋信息转换为棋谱文本\r\n\t * @returns {String} 棋谱文本，例如：\"红炮二平五\"或\"黑前炮进一\"\r\n\t */\r\n\ttoString() {\r\n\t\tconst isRed = this.color == \"r\";\r\n\t\treturn [\r\n\t\t\tisRed ? \"红\" : \"黑\",\r\n\t\t\t_constantTable__WEBPACK_IMPORTED_MODULE_0__.MAP_OF_CODES_TO_PREFIXES[this.prefix],\r\n\t\t\t_constantTable__WEBPACK_IMPORTED_MODULE_0__.MAP_OF_CODES_TO_PIECES[this.piece][+!isRed],\r\n\t\t\t_constantTable__WEBPACK_IMPORTED_MODULE_0__.MAP_OF_CODES_TO_CHINESE_NUMERALS[this.location],\r\n\t\t\t_constantTable__WEBPACK_IMPORTED_MODULE_0__.MAP_OF_CODES_TO_MOVE_DIRECTIONS[this.moveDirection],\r\n\t\t\t_constantTable__WEBPACK_IMPORTED_MODULE_0__.MAP_OF_CODES_TO_CHINESE_NUMERALS[this.moveRange],\r\n\t\t].join(\"\");\r\n\t}\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://xiangqi/./src/MovedRecord.js?");

/***/ }),

/***/ "./src/artyom.js":
/*!***********************!*\
  !*** ./src/artyom.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"artyom\": () => (/* binding */ artyom),\n/* harmony export */   \"artyomConfig\": () => (/* binding */ artyomConfig)\n/* harmony export */ });\n/* harmony import */ var artyom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! artyom.js */ \"./node_modules/_artyom.js@1.0.6@artyom.js/build/artyom.js\");\n/* harmony import */ var _printLog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./printLog */ \"./src/printLog.js\");\n/* harmony import */ var _commandListener__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commandListener */ \"./src/commandListener.js\");\n/* harmony import */ var _commands__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commands */ \"./src/commands.js\");\n/* harmony import */ var _assets_sounds_startRecording_wav__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../assets/sounds/startRecording.wav */ \"./assets/sounds/startRecording.wav\");\n/**\r\n * @file\r\n * Artyom 的实例配置、全局事件侦听\r\n *  doc: https://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/initialize\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst artyom = new artyom_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\nconst artyomConfig = {\r\n\tlang: \"zh-CN\",\r\n\tspeed: 2,\r\n\tvolume: 1,\r\n\tmode: \"normal\",  //正常识别速度\r\n\tdebug: false,\r\n\t// soundex: true,\r\n\tcontinuous: true,\r\n\tlisten: true,\r\n}\r\n\r\n\r\nwindow.addEventListener(\"load\", e => {\r\n\tartyom.initialize(artyomConfig).then(function () {\r\n\t\tconsole.log(\"Artyom has been correctly initialized\");\r\n\t}).catch(function () {\r\n\t\tconsole.error(\"An error occurred during the initialization\");\r\n\t});\r\n\tartyom.fatality();\r\n});\r\n\r\n//在 unload 之前关闭 artyom，用以解决刷新卡顿的问题\r\nwindow.addEventListener(\"unload\", e => {\r\n\tartyom.fatality();\r\n})\r\n\r\n//侦听所有指令\r\nartyom.addCommands({\r\n\tsmart: true,\r\n\tindexes: [\"*\"],\r\n\taction: function (i, command) {\r\n\t\t;(0,_printLog__WEBPACK_IMPORTED_MODULE_1__.printLog)(command, \"in\");\r\n\t\t//过滤中文标点\r\n\t\tcommand = command.replace(/[。；，：“”（）、？！《》]/g, \"\");\r\n\t\t_commandListener__WEBPACK_IMPORTED_MODULE_2__.commandListener.onNewCommand(command);\r\n\t}\r\n});\r\n\r\n// 开始聆听时播放提示音\r\n\r\n// import endRecordingUri from \"/assets/sounds/endRecording.wav\";\r\nconst startRecordingSound = new Audio(_assets_sounds_startRecording_wav__WEBPACK_IMPORTED_MODULE_4__[\"default\"]);\r\n// const endRecordingSound = new Audio(endRecordingUri);\r\nartyom.when(\"COMMAND_RECOGNITION_START\", function () {\r\n\tstartRecordingSound.play();\r\n});\r\nartyom.when(\"COMMAND_RECOGNITION_END\", function (status) {\r\n\tif (status.code == \"continuous_mode_disabled\") {\r\n\t\t// artyom.say(\"停止聆听\");\r\n\t}\r\n\t// endRecordingSound.play();\r\n});\r\n\r\n//语音合成前暂停命令识别，合成结束后恢复\r\nartyom.when(\"SPEECH_SYNTHESIS_START\", function () {\r\n\t// artyom.fatality();\r\n\tartyom.dontObey();\r\n});\r\nartyom.when(\"SPEECH_SYNTHESIS_END\", function () {\r\n\t// artyom.initialize(artyomConfig);\r\n\tartyom.obey();\r\n});\r\n\r\n//捕获 artyom error\r\nartyom.when(\"ERROR\", function (error) {\r\n\tif (error.code == \"network\") {\r\n\t\talert(\"无法连接到互联网\");\r\n\t}\r\n\tif (error.code == \"audio-capture\") {\r\n\t\talert(\"未检测到麦克风\");\r\n\t}\r\n\tif (error.code == \"not-allowed\") {\r\n\t\talert(\"无法使用麦克风\");\r\n\t}\r\n\tconsole.log(error.message);\r\n});\r\n\r\n// 捕获输出内容\r\n{\r\n\tconst say = artyom.say;\r\n\tartyom.say = function (text, ...params) {\r\n\t\t(0,_printLog__WEBPACK_IMPORTED_MODULE_1__.printLog)(text, \"out\");\r\n\t\treturn say.call(artyom, text, ...params);\r\n\t}\r\n}\r\n\r\n// 捕获识别内容\r\n/*\r\nartyom.redirectRecognizedTextOutput((recognized, isFinal) => {\r\n\tif (isFinal) {\r\n\t\t// Nothing\r\n\t} else {\r\n\t\tprintLog(recognized, \"in\");\r\n\t}\r\n});\r\n*/\r\n\r\n\n\n//# sourceURL=webpack://xiangqi/./src/artyom.js?");

/***/ }),

/***/ "./src/commandListener.js":
/*!********************************!*\
  !*** ./src/commandListener.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"commandListener\": () => (/* binding */ commandListener)\n/* harmony export */ });\n/**\r\n * 命令侦听器\r\n */\r\nclass CommandListener {\r\n\tconstructor() {\r\n\t\tthis._handlers = new Map();\r\n\t}\r\n\r\n\taddHandler(regexes, handler) {\r\n\t\tif (!Array.isArray(regexes)) {\r\n\t\t\tthrow new Error(\"regexes must be array\");\r\n\t\t}\r\n\t\tif (typeof handler != \"function\") {\r\n\t\t\tthrow new Error(\"handler must be function\");\r\n\t\t}\r\n\t\tthis._handlers.set(regexes, handler);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tremoveHandler(command) {\r\n\t\t//TODO\r\n\t}\r\n\r\n\tclearCommands() {\r\n\t\treturn this._handlers.clear();\r\n\t}\r\n\r\n\tonNewCommand(command) {\r\n\t\tif (typeof command != \"string\") {\r\n\t\t\tthrow new Error(\"command must be string\");\r\n\t\t}\r\n\t\tfor (const [regexes, fn] of this._handlers) {\r\n\t\t\tlet index = 0;\r\n\t\t\tfor (const regex of regexes) {\r\n\t\t\t\tconst found = command.match(regex);\r\n\t\t\t\tif (!found) {\r\n\t\t\t\t\tindex++;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tfn(index, found);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n}\r\n\r\nconst commandListener = new CommandListener();\r\n\r\n\r\n\n\n//# sourceURL=webpack://xiangqi/./src/commandListener.js?");

/***/ }),

/***/ "./src/commands.js":
/*!*************************!*\
  !*** ./src/commands.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _gameController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameController */ \"./src/gameController.js\");\n/* harmony import */ var _artyom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./artyom */ \"./src/artyom.js\");\n/* harmony import */ var _MovedRecord__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MovedRecord */ \"./src/MovedRecord.js\");\n/* harmony import */ var _commandListener__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commandListener */ \"./src/commandListener.js\");\n/* harmony import */ var _constantTable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constantTable */ \"./src/constantTable.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n_commandListener__WEBPACK_IMPORTED_MODULE_3__.commandListener.addHandler([\r\n\tnew RegExp(`\r\n(${_constantTable__WEBPACK_IMPORTED_MODULE_4__.PIECES.join(\"|\")})\r\n(${_constantTable__WEBPACK_IMPORTED_MODULE_4__.CHINESE_NUMERALS.join(\"|\")})\r\n(${_constantTable__WEBPACK_IMPORTED_MODULE_4__.MOVE_DIRECTIONS.join(\"|\")})\r\n(${_constantTable__WEBPACK_IMPORTED_MODULE_4__.CHINESE_NUMERALS.join(\"|\")})\r\n|\r\n(${_constantTable__WEBPACK_IMPORTED_MODULE_4__.PREFIXES.join(\"|\")})\r\n(${_constantTable__WEBPACK_IMPORTED_MODULE_4__.PIECES.join(\"|\")})\r\n(${_constantTable__WEBPACK_IMPORTED_MODULE_4__.MOVE_DIRECTIONS.join(\"|\")})\r\n(${_constantTable__WEBPACK_IMPORTED_MODULE_4__.CHINESE_NUMERALS.join(\"|\")})\r\n`.replace(/\\n/g, \"\"), \"g\"),\r\n], function (i, results) {\r\n\tconst command = results.pop();  //只提取最后一个合法命令\r\n\tconst movedRecord = new _MovedRecord__WEBPACK_IMPORTED_MODULE_2__.MovedRecord(command, _gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.redInAction);\r\n\t_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.move(movedRecord);\r\n});\r\n\r\n\r\n//询问棋子位置\r\n_commandListener__WEBPACK_IMPORTED_MODULE_3__.commandListener.addHandler([\r\n\tnew RegExp(`我的(${_constantTable__WEBPACK_IMPORTED_MODULE_4__.PIECES.join(\"|\")})在哪`),\r\n\tnew RegExp(`对方的(${_constantTable__WEBPACK_IMPORTED_MODULE_4__.PIECES.join(\"|\")})在哪`),\r\n], function (i, found) {\r\n\tconst rawPiece = found[1];\r\n\tconst pieceCode = _constantTable__WEBPACK_IMPORTED_MODULE_4__.MAP_OF_PIECES_TO_CODES[rawPiece];\r\n\tconst piece = _constantTable__WEBPACK_IMPORTED_MODULE_4__.MAP_OF_CODES_TO_PIECES[pieceCode][+!_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.redInAction];\r\n\tconst isMe = i == 0;\r\n\tlet positions = null;\r\n\tif (isMe) {\r\n\t\tpositions = _gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.getPiecePositions(pieceCode, _gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.redInAction ? \"r\" : \"b\")\r\n\t} else {\r\n\t\tpositions = _gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.getPiecePositions(pieceCode, !_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.redInAction ? \"r\" : \"b\")\r\n\t}\r\n\tlet answer = \"\";\r\n\tif (positions.length > 1) {\r\n\t\tanswer = `${isMe ? \"您\" : \"对方\"}有${positions.length}个${piece}。`;\r\n\t\tpositions.forEach((p, i) => {\r\n\t\t\tanswer += `第 ${i + 1} 个${piece}位于${p[0]}行，${p[1]}列。`;\r\n\t\t});\r\n\t} else if (positions.length == 1) {\r\n\t\tconst p = positions[0];\r\n\t\tanswer = `${isMe ? \"您\" : \"对方\"}的${piece}位于${p[0]}行，${p[1]}列。`;\r\n\t}\r\n\t_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.say(answer);\r\n});\r\n\n\n//# sourceURL=webpack://xiangqi/./src/commands.js?");

/***/ }),

/***/ "./src/constantTable.js":
/*!******************************!*\
  !*** ./src/constantTable.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CHINESE_NUMERALS\": () => (/* binding */ CHINESE_NUMERALS),\n/* harmony export */   \"MAP_OF_CHINESE_NUMERALS_TO_CODES\": () => (/* binding */ MAP_OF_CHINESE_NUMERALS_TO_CODES),\n/* harmony export */   \"MAP_OF_CODES_TO_CHINESE_NUMERALS\": () => (/* binding */ MAP_OF_CODES_TO_CHINESE_NUMERALS),\n/* harmony export */   \"MAP_OF_CODES_TO_MOVE_DIRECTIONS\": () => (/* binding */ MAP_OF_CODES_TO_MOVE_DIRECTIONS),\n/* harmony export */   \"MAP_OF_CODES_TO_PIECES\": () => (/* binding */ MAP_OF_CODES_TO_PIECES),\n/* harmony export */   \"MAP_OF_CODES_TO_PREFIXES\": () => (/* binding */ MAP_OF_CODES_TO_PREFIXES),\n/* harmony export */   \"MAP_OF_MOVE_DIRECTIONS_TO_CODES\": () => (/* binding */ MAP_OF_MOVE_DIRECTIONS_TO_CODES),\n/* harmony export */   \"MAP_OF_PIECES_TO_CODES\": () => (/* binding */ MAP_OF_PIECES_TO_CODES),\n/* harmony export */   \"MAP_OF_PREFIXES_TO_CODES\": () => (/* binding */ MAP_OF_PREFIXES_TO_CODES),\n/* harmony export */   \"MOVE_DIRECTIONS\": () => (/* binding */ MOVE_DIRECTIONS),\n/* harmony export */   \"PIECES\": () => (/* binding */ PIECES),\n/* harmony export */   \"PREFIXES\": () => (/* binding */ PREFIXES)\n/* harmony export */ });\nconst PREFIXES = ['前', '后'];\r\nconst PIECES = ['帅', '将', '士', '相', '象', '车', '马', '炮', '兵', '卒'];\r\nconst CHINESE_NUMERALS = ['一', '二', '三', '四', '五', '六', '七', '八', '九'];\r\nconst MOVE_DIRECTIONS = ['进', '退', '平'];\r\n\r\nconst MAP_OF_PREFIXES_TO_CODES = {\r\n\t\"前\": \"f\",\r\n\t\"后\": \"b\",\r\n}\r\nconst MAP_OF_CODES_TO_PREFIXES = {\r\n\t\"f\": \"前\",\r\n\t\"b\": \"后\",\r\n}\r\nconst MAP_OF_PIECES_TO_CODES = {\r\n\t\"帅\": \"t\",\r\n\t\"将\": \"t\",\r\n\t\"士\": \"o\",\r\n\t\"相\": \"e\",\r\n\t\"象\": \"e\",\r\n\t\"车\": \"v\",\r\n\t\"马\": \"h\",\r\n\t\"炮\": \"c\",\r\n\t\"兵\": \"w\",\r\n\t\"卒\": \"w\",\r\n}\r\nconst MAP_OF_CODES_TO_PIECES = {\r\n\t\"t\": \"帅将\",\r\n\t\"o\": \"士士\",\r\n\t\"e\": \"相象\",\r\n\t\"v\": \"车车\",\r\n\t\"h\": \"马马\",\r\n\t\"c\": \"炮炮\",\r\n\t\"w\": \"兵卒\",\r\n}\r\nconst MAP_OF_MOVE_DIRECTIONS_TO_CODES = {\r\n\t\"进\": \"gf\",\r\n\t\"退\": \"gb\",\r\n\t\"平\": \"gh\",\r\n}\r\nconst MAP_OF_CODES_TO_MOVE_DIRECTIONS = {\r\n\t\"gf\": \"进\",\r\n\t\"gb\": \"退\",\r\n\t\"gh\": \"平\",\r\n}\r\nconst MAP_OF_CHINESE_NUMERALS_TO_CODES = {\r\n\t\"一\": \"1\",\r\n\t\"二\": \"2\",\r\n\t\"三\": \"3\",\r\n\t\"四\": \"4\",\r\n\t\"五\": \"5\",\r\n\t\"六\": \"6\",\r\n\t\"七\": \"7\",\r\n\t\"八\": \"8\",\r\n\t\"九\": \"9\",\r\n}\r\nconst MAP_OF_CODES_TO_CHINESE_NUMERALS = {\r\n\t\"1\": \"一\",\r\n\t\"2\": \"二\",\r\n\t\"3\": \"三\",\r\n\t\"4\": \"四\",\r\n\t\"5\": \"五\",\r\n\t\"6\": \"六\",\r\n\t\"7\": \"七\",\r\n\t\"8\": \"八\",\r\n\t\"9\": \"九\",\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://xiangqi/./src/constantTable.js?");

/***/ }),

/***/ "./src/game-logic/gameLogic.js":
/*!*************************************!*\
  !*** ./src/game-logic/gameLogic.js ***!
  \*************************************/
/***/ ((module) => {

eval("/*\r\n    description: a class named GameLogic includes action, findOut, stepback, decision and warning several methods.\r\n    developer: Eric.\r\n*/\r\n\r\nclass GameLogic {\r\n    \r\n    constructor(){\r\n    this.checkerboard=[[\"rv\",\"rh\",\"re\",\"ro\",\"rt\",\"ro\",\"re\",\"rh\",\"rv\"],\r\n    [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\r\n    [\"\",\"rc\",\"\",\"\",\"\",\"\",\"\",\"rc\",\"\"],\r\n    [\"rw\",\"\",\"rw\",\"\",\"rw\",\"\",\"rw\",\"\",\"rw\"],\r\n    [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\r\n    [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\r\n    [\"bw\",\"\",\"bw\",\"\",\"bw\",\"\",\"bw\",\"\",\"bw\"],\r\n    [\"\",\"bc\",\"\",\"\",\"\",\"\",\"\",\"bc\",\"\"],\r\n    [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\r\n    [\"bv\",\"bh\",\"be\",\"bo\",\"bt\",\"bo\",\"be\",\"bh\",\"bv\"]];\r\n    this.lastCheckerboard=[];\r\n    }\r\n    \r\n    stepback(){\r\n        if (this.lastCheckerboard.length==0)\r\n            return false;\r\n        this.checkerboard=[];\r\n        for (let i=0; i < this.lastCheckerboard.length; i++)\r\n            this.checkerboard.push(this.lastCheckerboard[i].slice());\r\n        this.lastCheckerboard=[];\r\n        return true;\r\n    }\r\n    \r\n    action(id,chess_piece,location,act,size){\r\n        this.lastCheckerboard=[];\r\n        for (let i=0; i < this.checkerboard.length; i++)\r\n            this.lastCheckerboard.push(this.checkerboard[i].slice());\r\n        let status=0;\r\n        let targetPoint=[-1,-1];\r\n        let index=-1;\r\n        let temp=[];\r\n        let bf=\"\";\r\n        if (location!=\"b\" && location!=\"f\"){\r\n            location=parseInt(location);\r\n            if (id==\"r\")\r\n                location=10-location;\r\n        }\r\n        else {\r\n            bf=location;\r\n            for (let i =0; i < 9; i++){\r\n                let count=0;\r\n                for (let j=0; j < 10; j++){\r\n                    if (this.checkerboard[j][i]==id+chess_piece)\r\n                        count+=1;\r\n                }//for2\r\n                if (count > 1)\r\n                    location=i+1;\r\n            }//for1\r\n            if(location==\"b\" || location==\"f\")\r\n                return status;\r\n        }\r\n        size=parseInt(size);\r\n        location=location-1;\r\n        if (this.findOut(id+chess_piece,location).length ==0) \r\n            return status;\r\n        if (bf ==\"f\")\r\n            index=this.findOut(id+chess_piece,location)[1][0];\r\n        else\r\n            index=this.findOut(id+chess_piece,location)[0][0];\r\n        if (act==\"gf\"){\r\n            console.log(\"index\",index,\"size\",size,\"act\",act);\r\n            switch (chess_piece) {\r\n                case \"v\":\r\n                    if (id==\"r\") {\r\n                        if (index+size > 9)\r\n                            return status;\r\n                        if (size> 1){\r\n                            if (this.findOut(\"\",location,\"vertical\",[index+1,index+size-1]).length !=size-1)\r\n                                return status;\r\n                            else{\r\n                                temp=this.decision(id,[index + size,location]);\r\n                                status=temp[0];\r\n                                targetPoint=temp[1];\r\n                            }\r\n                        }// size > 1\r\n                        else {\r\n                            temp=this.decision(id,[index+size,location]);\r\n                            status=temp[0];\r\n                            targetPoint=temp[1];\r\n                        }// size <=1\r\n                    } // id is red\r\n                    else {\r\n                        size=-size;\r\n                        if (index + size < 0)\r\n                            return status;\r\n                        if (size < -1) {\r\n                            if (this.findOut(\"\",location,\"vertical\",[index-1,index+size+1]).length !=Math.abs(size)-1)\r\n                                return status;\r\n                            temp=this.decision(id,[index +size,location]);\r\n                            status=temp[0];\r\n                            targetPoint=temp[1];\r\n                        }//size < -1\r\n                        else {\r\n                            temp=this.decision(id,[index+size,location]);\r\n                            status=temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                    }//id is black\r\n                    break;\r\n                case \"h\":\r\n                    if (id==\"r\"){\r\n                        size=10 - size;\r\n                        console.log(\"size\",size,\"location\",location);\r\n                        if (size-1==location-1 || size-1 ==location+1) {\r\n                            if (this.findOut(\"\",location,\"vertical\",[index+1,index+1]).length !=1)\r\n                                return status;\r\n                            temp =this.decision(id,[index+2,size-1]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else if (size-1==location-2) {\r\n                            if (this.findOut(\"\",index,\"horization\",[location-1,location-1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index+1,size-1]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else if (size-1 ==location+2){\r\n                            if (this.findOut(\"\",index,\"horization\",[location+1,location+1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index+1,size-1]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else {\r\n                            return status;\r\n                        }\r\n                    } //id is red\r\n                    else {\r\n                        if (size-1==location-1 || size-1 ==location+1) {\r\n                            if (this.findOut(\"\",location,\"vertical\",[index-1,index-1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index-2,size-1]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else if (size-1==location-2) {\r\n                            if (this.findOut(\"\",index,\"horization\",[location-1,location-1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index-1,size-1]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else if (size-1 ==location+2){\r\n                            if (this.findOut(\"\",index,\"horization\",[location+1,location+1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index-1,size-1]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else {\r\n                            return status;\r\n                        }\r\n                    }// id is black\r\n                    break;\r\n                case \"e\":\r\n                    if (id ==\"r\") {\r\n                        size=10-size;\r\n                        if (index+2 >4)\r\n                            return status;\r\n                        if (size-1 ==location-2) {\r\n                            if (this.findOut(\"\",location-1,\"vertical\",[index+1,index+1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index+2,location-2]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else if (size-1 ==location+2){\r\n                            if (this.findOut(\"\",location+1,\"vertical\",[index+1,index+1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index+2,location+2]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else\r\n                            return status;\r\n                    }// id is red\r\n                    else {\r\n                        if (index-2 < 5)\r\n                            return status;\r\n                        if (size-1 ==location-2) {\r\n                            if (this.findOut(\"\",location-1,\"vertical\",[index-1,index-1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index-2,location-2]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else if (size-1 ==location+2){\r\n                            if (this.findOut(\"\",location+1,\"vertical\",[index-1,index-1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index-2,location+2]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else\r\n                            return status;\r\n                    }// id is black\r\n                    break;\r\n                case \"o\":\r\n                    if (id ==\"r\"){\r\n                        size=10-size;\r\n                        if (index+1 >2)\r\n                            return status;\r\n                        if (!(4 < size && size < 6) || size-1 ==location)\r\n                            return status;\r\n                        temp=this.decision(id,[index+1,size-1]);\r\n                        status = temp[0];\r\n                        targetPoint=temp[1];\r\n                    }// id is red\r\n                    else{\r\n                        if (index-1<7)\r\n                            return status;\r\n                        if (!(4 <= size && size <= 6) || size-1 ==location || size-1==location+2 || size-1==location-2)\r\n                            return status;\r\n                        temp=this.decision(id,[index-1,size-1]);\r\n                        status = temp[0];\r\n                        targetPoint=temp[1];\r\n                    }// id is black\r\n                    break;\r\n                case \"t\":\r\n                    if (id ==\"r\"){\r\n                        if (size!=1 || index+1 > 2)\r\n                            return status;\r\n                        temp=this.decision(id,[index+size,location]);\r\n                        status = temp[0];\r\n                        targetPoint=temp[1];\r\n                    }// id is red\r\n                    else{\r\n                        if (index-1 < 7 || size!=1)\r\n                            return status;\r\n                        temp=this.decision(id,[index-size,location]);\r\n                        status = temp[0];\r\n                        targetPoint=temp[1];\r\n                    }// id is black\r\n                    break;\r\n                case \"c\":\r\n                    if (id==\"r\") {\r\n                        if (index+size > 9)\r\n                            return status;\r\n                        if (size> 1){\r\n                            if (this.findOut(\"\",location,\"vertical\",[index+1,index+size-1]).length ==size-1){\r\n                                temp=this.decision(id,[index + size,location]);\r\n                                status = temp[0];\r\n                                targetPoint=temp[1];\r\n                                if (status==2)\r\n                                    status=0;\r\n                            }\r\n                            else if (this.findOut(\"\",location,\"vertical\",[index+1,index+size-1]).length ==size-2) {\r\n                                temp=this.decision(id,[index + size,location]);\r\n                                status = temp[0];\r\n                                targetPoint=temp[1];\r\n                                if (status==1)\r\n                                    status=0;\r\n                            }\r\n                            else{\r\n                                status=0;\r\n                            }\r\n                        }// size > 1\r\n                        else {\r\n                            temp=this.decision(id,[index+size,location]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                            if (status==2)\r\n                                status=0;\r\n                        }// size <=1\r\n                    } // id is red\r\n                    else {\r\n                        size=-size;\r\n                        if (index + size < 0)\r\n                            return status;\r\n                        if (size < -1) {\r\n                            if (this.findOut(\"\",location,\"vertical\",[index-1,index+size+1]).length ==Math.abs(size)-1){\r\n                                temp=this.decision(id,[index +size,location]);\r\n                                status = temp[0];\r\n                                targetPoint=temp[1];\r\n                                if (status==2)\r\n                                    status=0;\r\n                            }\r\n                            else if (this.findOut(\"\",location,\"vertical\",[index-1,index+size+1]).length ==Math.abs(size)-2){\r\n                                temp=this.decision(id,[index +size,location]);\r\n                                status = temp[0];\r\n                                targetPoint=temp[1];\r\n                                if (status==1)\r\n                                    status=0;\r\n                            }\r\n                            else\r\n                                status=0;\r\n                        }//size < -1\r\n                        else {\r\n                            temp=this.decision(id,[index+size,location]);\r\n                            status = temp[0];targetPoint=temp[1];\r\n                            if (status==2)\r\n                                status=0;\r\n                        }\r\n                    }//id is black\r\n                    break;\r\n                case \"w\":\r\n                    if (id ==\"r\") {\r\n                        if (size >1 || index+size > 9)\r\n                            return status;\r\n                        temp=this.decision(id,[index+size,location]);\r\n                        status = temp[0];\r\n                        targetPoint=temp[1];\r\n                    }// id is red\r\n                    else{\r\n                        size=-size;\r\n                        if (size<-1 || index+size < 0)\r\n                            return status;\r\n                        temp=this.decision(id,[index+size,location]);\r\n                        status = temp[0];\r\n                        targetPoint=temp[1];\r\n                    }// id is black\r\n                    break;\r\n            } // switch\r\n        } // act is gf\r\n        else if (act==\"gb\"){\r\n            console.log(\"index\",index,\"size\",size,\"act\",act);\r\n            switch (chess_piece) {\r\n                case \"v\":\r\n                    if (id==\"r\") {\r\n                        if (index-size < 0)\r\n                            return status;\r\n                        if (size> 1){\r\n                            if (this.findOut(\"\",location,\"vertical\",[index-1,index-size+1]).length !=size-1)\r\n                                return status;\r\n                            temp=this.decision(id,[index - size,location]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }// size > 1\r\n                        else {\r\n                            temp=this.decision(id,[index - size,location]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }// size <=1\r\n                    } // id is red\r\n                    else {\r\n                        size=-size;\r\n                        if (index - size > 9)\r\n                            return status;\r\n                        if (size < -1) {\r\n                            if (this.findOut(\"\",location,\"vertical\",[index+1,index-size-1]).length !=Math.abs(size)-1)\r\n                                return status;\r\n                            temp=this.decision(id,[index - size,location]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }//size < -1\r\n                        else {\r\n                            temp=this.decision(id,[index - size,location]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                    }//id is black\r\n                    break;\r\n                case \"h\":\r\n                    if (id==\"r\"){\r\n                        size=10 - size;\r\n                        if (size-1==location-1 || size-1 ==location+1) {\r\n                            if (this.findOut(\"\",location,\"vertical\",[index-1,index-1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index-2,size-1]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else if (size-1==location-2) {\r\n                            if (this.findOut(\"\",index,\"horization\",[location-1,location-1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index-1,size-1]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else if (size-1 ==location+2){\r\n                            if (this.findOut(\"\",index,\"horization\",[location+1,location+1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index-1,size-1]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else {\r\n                            return status;\r\n                        }\r\n                    } //id is red\r\n                    else {\r\n                        if (size-1==location-1 || size-1 ==location+1) {\r\n                            if (this.findOut(\"\",location,\"vertical\",[index+1,index+1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index+2,size-1]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else if (size-1==location-2) {\r\n                            if (this.findOut(\"\",index,\"horization\",[location-1,location-1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index+1,size-1]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else if (size-1 ==location+2){\r\n                            if (this.findOut(\"\",index,\"horization\",[location+1,location+1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index+1,size-1]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else {\r\n                            return status;\r\n                        }\r\n                    }// id is black\r\n                    break;\r\n                case \"e\":\r\n                    if (id ==\"r\") {\r\n                        size=10-size;\r\n                        if (index-2 < 0)\r\n                            return status;\r\n                        if (size-1 ==location-2) {\r\n                            if (this.findOut(\"\",location-1,\"vertical\",[index-1,index-1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index-2,location-2]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else if (size-1 ==location+2){\r\n                            if (this.findOut(\"\",location+1,\"vertical\",[index-1,index-1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index-2,location+2]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else\r\n                            return status;\r\n                    }// id is red\r\n                    else {\r\n                        if (index+2 > 9)\r\n                            return status;\r\n                        if (size-1 ==location-2) {\r\n                            if (this.findOut(\"\",location-1,\"vertical\",[index+1,index+1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index+2,location-2]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else if (size-1 ==location+2){\r\n                            if (this.findOut(\"\",location+1,\"vertical\",[index+1,index+1]).length !=1)\r\n                                return status;\r\n                            temp=this.decision(id,[index+2,location+2]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                        }\r\n                        else\r\n                            return status;\r\n                    }// id is black\r\n                    break;\r\n                case \"o\":\r\n                    if (id ==\"r\"){\r\n                        size=10-size;\r\n                        if (index-1 < 0)\r\n                            return status;\r\n                        if (!(4 < size && size < 6) || size-1 ==location)\r\n                            return status;\r\n                        temp=this.decision(id,[index-1,size-1]);\r\n                        status = temp[0];\r\n                        targetPoint=temp[1];\r\n                    }// id is red\r\n                    else{\r\n                        if (index+1 > 9)\r\n                            return status;\r\n                        if (!(4 <= size && size <= 6) || size-1 ==location || size-1==location+2 || size-1==location-2)\r\n                            return status;\r\n                        temp=this.decision(id,[index+1,size-1]);\r\n                        status = temp[0];\r\n                        targetPoint=temp[1];\r\n                    }// id is black\r\n                    break;\r\n                case \"t\":\r\n                    if (id ==\"r\"){\r\n                        if (size!=1 || index-1 < 0)\r\n                            return status;\r\n                        temp=this.decision(id,[index-size,location]);\r\n                        status = temp[0];\r\n                        targetPoint=temp[1];\r\n                    }// id is red\r\n                    else{\r\n                        if (index+1 > 9 || size!=1)\r\n                            return status;\r\n                        temp=this.decision(id,[index+size,location]);\r\n                        status = temp[0];\r\n                        targetPoint=temp[1];\r\n                    }// id is black\r\n                    break;\r\n                case \"c\":\r\n                    if (id==\"r\") {\r\n                        if (index - size < 0)\r\n                            return status;\r\n                        if (size> 1){\r\n                            if (this.findOut(\"\",location,\"vertical\",[index-1,index-size+1]).length ==size-1){\r\n                                temp=this.decision(id,[index - size,location]);\r\n                                status = temp[0];\r\n                                targetPoint=temp[1];\r\n                                if (status==2)\r\n                                    status=0;\r\n                            }\r\n                            else if (this.findOut(\"\",location,\"vertical\",[index-1,index-size+1]).length ==size-2) {\r\n                                temp=this.decision(id,[index - size,location]);\r\n                                status = temp[0];\r\n                                targetPoint=temp[1];\r\n                                if (status==1)\r\n                                    status=0;\r\n                            }\r\n                            else{\r\n                                status=0;\r\n                            }\r\n                        }// size > 1\r\n                        else {\r\n                            temp=this.decision(id,[index-size,location]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                            if (status==2)\r\n                                status=0;\r\n                        }// size <=1\r\n                    } // id is red\r\n                    else {\r\n                        size=-size;\r\n                        if (index - size > 9)\r\n                            return status;\r\n                        if (size < -1) {\r\n                            if (this.findOut(\"\",location,\"vertical\",[index+1,index-size-1]).length ==Math.abs(size)-1){\r\n                                temp=this.decision(id,[index -size,location]);\r\n                                status = temp[0];\r\n                                targetPoint=temp[1];\r\n                                if (status==2)\r\n                                    status=0;\r\n                            }\r\n                            else if (this.findOut(\"\",location,\"vertical\",[index-1,index-size-1]).length ==Math.abs(size)-2){\r\n                                temp=this.decision(id,[index -size,location]);\r\n                                status = temp[0];\r\n                                targetPoint=temp[1];\r\n                                if (status==1)\r\n                                    status=0;\r\n                            }\r\n                            else\r\n                                status=0;\r\n                        }//size < -1\r\n                        else {\r\n                            temp=this.decision(id,[index-size,location]);\r\n                            status = temp[0];\r\n                            targetPoint=temp[1];\r\n                            if (status==2)\r\n                                status=0;\r\n                        }\r\n                    }//id is black\r\n                    break;\r\n            } // switch\r\n        } // act is gb\r\n        else { // act is go horization\r\n            if (size >9 || size <1)\r\n                return status;\r\n            if (id==\"r\")\r\n                size=10 - size;\r\n            size=size-1;\r\n            console.log(\"index\",index,\"size\",size,\"act\",act);\r\n            switch (chess_piece) {\r\n                case \"v\":\r\n                    if ((this.findOut(\"\",index,\"horization\",[location,size]).length!=Math.abs(size-location)-1 && this.checkerboard[index][size]!=\"\") && (this.findOut(\"\",index,\"horization\",[location,size]).length!=Math.abs(size-location) && this.checkerboard[index][size]==\"\"))\r\n                        return status;\r\n                    temp=this.decision(id,[index,size]);\r\n                    status = temp[0];\r\n                    targetPoint=temp[1];\r\n                    break;\r\n                case \"c\":\r\n                    if (this.checkerboard[index][size]==\"\" && this.findOut(\"\",index,\"horization\",[location,size]).length==Math.abs(size-location)) {\r\n                        temp=this.decision(id,[index,size]);\r\n                        status = temp[0];\r\n                        targetPoint=temp[1];\r\n                        if (status==2)\r\n                            status=0;\r\n                    }\r\n                    else if (this.checkerboard[index][size]!=\"\" && this.findOut(\"\",index,\"horization\",[location,size]).length ==Math.abs(size-location)-2) {\r\n                        temp=this.decision(id,[index,size]);\r\n                        status = temp[0];\r\n                        targetPoint=temp[1];\r\n                        if (status==1)\r\n                            status=0;\r\n                    }\r\n                    else{\r\n                        return status;\r\n                    }\r\n                    break;\r\n                case \"t\":\r\n                    if (!(3 <= size && size <= 5) || size ==location || Math.abs(location-size) !=1)\r\n                        return status;\r\n                    temp=this.decision(id,[index,size]);\r\n                    status = temp[0];\r\n                    targetPoint=temp[1];\r\n                    break;\r\n                case \"w\":\r\n                    if (Math.abs(location-size)!=1)\r\n                        return status;\r\n                    if (id==\"r\"){\r\n                        if (index <=4)\r\n                            return status;\r\n                        temp=this.decision(id,[index,size]);\r\n                        status = temp[0];\r\n                        targetPoint=temp[1];\r\n                    }\r\n                    else {\r\n                        if (index>=5)\r\n                            return status;\r\n                        temp=this.decision(id,[index,size]);\r\n                        status = temp[0];\r\n                        targetPoint=temp[1];\r\n                    }\r\n                    break;\r\n            }// switch\r\n        }//act is gh\r\n        if (status !=0){\r\n            if(this.checkerboard[targetPoint[0]][targetPoint[1]]==\"bt\"){\r\n                this.checkerboard[targetPoint[0]][targetPoint[1]]=this.checkerboard[index][location];\r\n                this.checkerboard[index][location]=\"\";\r\n                status=3;\r\n            }\r\n            else if(this.checkerboard[targetPoint[0]][targetPoint[1]]==\"rt\"){\r\n                this.checkerboard[targetPoint[0]][targetPoint[1]]=this.checkerboard[index][location];\r\n                this.checkerboard[index][location]=\"\";\r\n                status=4;\r\n            }\r\n            else {\r\n                this.checkerboard[targetPoint[0]][targetPoint[1]]=this.checkerboard[index][location];\r\n                this.checkerboard[index][location]=\"\";\r\n                if (this.warning(id).length > 0)\r\n                    status=5;\r\n            }\r\n            //console.log(\"目标点\",targetPoint,this.checkerboard[targetPoint[0]][targetPoint[1]]);\r\n            //console.log(\"远点\",[index,location],this.checkerboard[index][location]);\r\n        }\r\n        return status;\r\n    } //action\r\n    \r\n    findOut(target,location,direction=\"vertical\",region=[0,9]) {\r\n        let pointList=[];\r\n        if (region[0] > region[1]) {\r\n            let temp=region[1];\r\n            region[1]=region[0];\r\n            region[0]=temp;\r\n        }\r\n        if (direction==\"vertical\"){\r\n            for (let i =region[0]; i <= region[1]; i++){\r\n                if (this.checkerboard[i][location] ==target) \r\n                    pointList.push([i,location]);\r\n            } // for \r\n        } // if\r\n        else {\r\n            for (let i =region[0]; i <= region[1]; i++){\r\n                if (this.checkerboard[location][i] ==target) \r\n                    pointList.push([location,i]);\r\n            } // for \r\n        } //else\r\n        return pointList;\r\n    }//findOut\r\n    \r\n    decision(id,point){\r\n        console.log(\"目标位置检测\",point);\r\n        if (this.checkerboard[point[0]][point[1]] ==\"\")\r\n            return [1,point];\r\n        else{\r\n            if (this.checkerboard[point[0]][point[1]][0]==id)\r\n                return [0,[-1,-1]];\r\n            else\r\n                return [2,point];\r\n        }//else\r\n    }//decision\r\n\r\n    warning(id){\r\n        let targetId=\"b\";\r\n        if (id==\"b\")\r\n            targetId=\"r\";\r\n        let positionList=[];\r\n        let kingPosition=[];\r\n        let threatList =[];\r\n        for (let i =0; i <10; i++){\r\n            for (let j=0; j < 9; j++){\r\n                if (this.checkerboard[i][j]!=\"\" && this.checkerboard[i][j][0]!=targetId)\r\n                    positionList.push([this.checkerboard[i][j],[i,j]]);\r\n                if (this.checkerboard[i][j][0]==targetId && this.checkerboard[i][j][1]==\"t\")\r\n                    kingPosition.push(i,j);\r\n            }// for 2\r\n        }//for1\r\n        console.log(\"我方部署\",positionList,positionList.length);\r\n        console.log(\"kingPosition\",kingPosition);\r\n        for (let i =0; i < positionList.length; i++){\r\n            let k=positionList[i][1][0];\r\n            let j=positionList[i][1][1];\r\n            switch (positionList[i][0][1]) {\r\n                case \"v\":\r\n                    if (positionList[i][1][0] ==kingPosition[0] || positionList[i][1][1] ==kingPosition[1]){\r\n                        if (this.findOut(\"\",kingPosition[0],\"horization\",[positionList[i][1][1],kingPosition[1]]).length==Math.abs(positionList[i][1][1]-kingPosition[1])-1 || this.findOut(\"\",kingPosition[1],\"vertical\",[positionList[i][1][0] , kingPosition[0]]).length ==Math.abs(positionList[i][1][0]-kingPosition[0])-1)\r\n                            threatList.push(positionList[i]);\r\n                    }//if\r\n                    break;\r\n                case \"c\":\r\n                    if (positionList[i][1][0] ==kingPosition[0] || positionList[i][1][1] ==kingPosition[1]){\r\n                        if (this.findOut(\"\",kingPosition[0],\"horization\",[positionList[i][1][1],kingPosition[1]]).length==Math.abs(positionList[i][1][1]-kingPosition[1])-2 || this.findOut(\"\",kingPosition[1],\"vertical\",[positionList[i][1][0] , kingPosition[0]]).length ==Math.abs(positionList[i][1][0]-kingPosition[0])-2)\r\n                            threatList.push(positionList[i]);\r\n                    }\r\n                    break;\r\n                case \"w\":\r\n                    if (positionList[i][1][0] ==kingPosition[0] || positionList[i][1][1] ==kingPosition[1]){\r\n                        if (Math.abs(positionList[i][1][0] -kingPosition[0])==1 || Math.abs(positionList[i][1][1]-kingPosition[1])==1)\r\n                            threatList.push(positionList[i]);\r\n                    }\r\n                    break;\r\n                case \"h\":\r\n                    if (Math.abs(positionList[i][1][0] -kingPosition[0]) ==2 && Math.abs(positionList[i][1][1] -kingPosition[1]) ==1) {\r\n                        if ((kingPosition[0] > positionList[i][1][0] && this.checkerboard[k+1][j]==\"\") || (kingPosition[0] < positionList[i][1][0] && this.checkerboard[k-1][j]==\"\"))\r\n                            threatList.push(positionList[i]);\r\n                    }\r\n                    if (Math.abs(positionList[i][1][1] -kingPosition[1]) ==2 && Math.abs(positionList[i][1][0] -kingPosition[0]) ==1) {\r\n                        if ((kingPosition[1] > positionList[i][1][1] && this.checkerboard[k][j+1]==\"\") || (kingPosition[1] < positionList[i][1][1] && this.checkerboard[k][j-1]==\"\"))\r\n                            threatList.push(positionList[i]);\r\n                    }\r\n            }//switch\r\n        }//for\r\n        console.log(\"将军其\",threatList);\r\n        return threatList;\r\n    }//warning\r\n    \r\n    searchRole(id,role){\r\n        let result=[];\r\n        for (let i =0;i < 10; i++){\r\n            for (let j =0; j < 9; j++){\r\n                if(this.checkerboard[i][j]==id+role){\r\n                    if (id==\"r\")\r\n                        result.push([i+1,9-j]);\r\n                    else\r\n                        result.push([10-i,j+1]);\r\n                }\r\n            }//for2\r\n        }//for1\r\n        return result;\r\n    } //role\r\n}\r\n\r\n//let g=new GameLogic();\r\n//console.log(g.searchRole(\"b\",\"w\"));\r\n\r\nmodule.exports =GameLogic;\n\n//# sourceURL=webpack://xiangqi/./src/game-logic/gameLogic.js?");

/***/ }),

/***/ "./src/gameController.js":
/*!*******************************!*\
  !*** ./src/gameController.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gameController\": () => (/* binding */ gameController)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"./node_modules/_events@3.3.0@events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _game_logic_gameLogic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./game-logic/gameLogic */ \"./src/game-logic/gameLogic.js\");\n/* harmony import */ var _game_logic_gameLogic__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_game_logic_gameLogic__WEBPACK_IMPORTED_MODULE_1__);\n\r\n\r\n\r\n/**\r\n * 游戏控制器\r\n * @classdesc 提供游戏流程控制接口、状态信息查询接口、事件监听接口\r\n */\r\nclass GameController extends events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\r\n\t_started = false; // 游戏是否开始\r\n\t_movedCount = 0;  //走棋数\r\n\t_startTime = 0; // 游戏开始时间\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.logic = null;\r\n\t}\r\n\r\n\tstartGame() {\r\n\t\tif (this._started) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.logic = new (_game_logic_gameLogic__WEBPACK_IMPORTED_MODULE_1___default())();\r\n\t\tthis._started = true;\r\n\t\t// this._redInAction = true;\r\n\t\t// this._roundNumber = 1;\r\n\t\tthis._movedCount = 0;\r\n\t\tthis._startTime = Date.now();\r\n\t\tthis.emit(\"gameStarted\");\r\n\t\treturn true;\r\n\t}\r\n\r\n\tendGame(winner) {\r\n\t\tif (!this._started) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.logic = null;\r\n\t\tthis._started = false;\r\n\t\tthis.emit(\"gameEnded\", winner);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t//走棋\r\n\tmove(movedRecord) {\r\n\t\tif (!this.started) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!movedRecord) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst ret = this.logic.action(\r\n\t\t\tmovedRecord.color,\r\n\t\t\tmovedRecord.piece,\r\n\t\t\tmovedRecord.prefix || movedRecord.location,\r\n\t\t\tmovedRecord.moveDirection,\r\n\t\t\tmovedRecord.moveRange,\r\n\t\t);\r\n\r\n\t\tswitch (ret) {\r\n\t\t\tcase 0:  //走棋失败\r\n\t\t\t\tthis._moveFailed(movedRecord);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:  //走棋成功\r\n\t\t\t\tthis._moveCompleted(movedRecord);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:  //走棋成功并吃子\r\n\t\t\t\tthis._moveCompleted(movedRecord);\r\n\t\t\t\tthis._eat();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3: //红方胜\r\n\t\t\t\tthis._moveCompleted(movedRecord);\r\n\t\t\t\tthis.endGame(\"r\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:  //黑方胜\r\n\t\t\t\tthis._moveCompleted(movedRecord);\r\n\t\t\t\tthis.endGame(\"b\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:  //将军\r\n\t\t\t\tthis._moveCompleted(movedRecord);\r\n\t\t\t\tthis._jiang();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.error(\"Unknown return value: \" + ret);\r\n\t\t}\r\n\t\treturn !!ret;\r\n\t}\r\n\r\n\t_moveCompleted(movedRecord) {\r\n\t\tthis._movedCount++;\r\n\t\tthis.emit(\"moveCompleted\", movedRecord);\r\n\t}\r\n\r\n\t_moveFailed(movedRecord) {\r\n\t\tthis.emit(\"moveFailed\", movedRecord);\r\n\t}\r\n\r\n\t//吃子\r\n\t_eat() {\r\n\t\tthis.emit(\"eat\");\r\n\t}\r\n\r\n\t//将军\r\n\t_jiang() {\r\n\t\tthis.emit(\"jiang\");\r\n\t}\r\n\r\n\t//悔棋\r\n\tmoveRevoke() {\r\n\t\tif (!this.started) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (this._movedCount == 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tconst completed = this.logic.stepback();\r\n\t\tif (!completed) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis._movedCount--;\r\n\t\tthis.emit(\"moveRevoke\");\r\n\t\treturn true;\r\n\t}\r\n\r\n\t//求和\r\n\tdraw() {\r\n\t\tif (!this.started) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.emit(\"draw\", this.redInAction);\r\n\t}\r\n\r\n\t//认输\r\n\tsurrender() {\r\n\t\tif (!this.started) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.emit(\"surrender\", this.redInAction);\r\n\t\tconst winner = this.redInAction ? \"b\" : \"r\";\r\n\t\tthis.endGame(winner);\r\n\t}\r\n\r\n\t//获取棋子位置\r\n\tgetPiecePositions(piece, color) {\r\n\t\tif (!this.started) {\r\n\t\t\tthrow new Error(\"Game not started\");\r\n\t\t}\r\n\t\treturn this.logic.searchRole(color, piece);\r\n\t}\r\n\r\n\tget started() {\r\n\t\treturn this._started;\r\n\t}\r\n\r\n\tget movedCount() {\r\n\t\treturn this._movedCount;\r\n\t}\r\n\r\n\t//判断是否红方行动\r\n\tget redInAction() {\r\n\t\treturn this._movedCount % 2 == 0;\r\n\t}\r\n\r\n\t//获取回合数\r\n\tget roundNumber() {\r\n\t\treturn 1 + (this._movedCount >> 1);\r\n\t}\r\n\r\n\tget startTime() {\r\n\t\treturn this._startTime;\r\n\t}\r\n}\r\n\r\n\r\nconst gameController = new GameController();\r\n\r\n\n\n//# sourceURL=webpack://xiangqi/./src/gameController.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _gameController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameController */ \"./src/gameController.js\");\n/* harmony import */ var _artyom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./artyom */ \"./src/artyom.js\");\n/* harmony import */ var _printLog__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./printLog */ \"./src/printLog.js\");\n\r\n\r\n\r\n\r\nconst startOrEndBtn = document.querySelector('#start-or-end-btn');  //开始或结束游戏\r\nconst revokeBtn = document.querySelector('#revoke-btn');  //悔棋\r\nconst drawBtn = document.querySelector('#draw-btn');  //求和\r\nconst surrenderBtn = document.querySelector('#surrender-btn');  //认输\r\nconst listenBtn = document.querySelector('#listen-btn');  //语音聆听\r\n\r\nstartOrEndBtn.addEventListener(\"click\", e => {\r\n\tif (_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.started) {\r\n\t\t_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.endGame();\r\n\t} else {\r\n\t\t_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.startGame();\r\n\t}\r\n});\r\n\r\nrevokeBtn.addEventListener(\"click\", e => {\r\n\t_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.moveRevoke();\r\n});\r\n\r\ndrawBtn.addEventListener(\"click\", e => {\r\n\t_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.draw();\r\n});\r\n\r\nsurrenderBtn.addEventListener(\"click\", e => {\r\n\tconst isOk = confirm(\"确定要认输吗？\");\r\n\tif (isOk) {\r\n\t\t_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.surrender();\r\n\t}\r\n});\r\n\r\nlistenBtn.addEventListener(\"click\", e => {\r\n\tif (!_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.isRecognizing()) {\r\n\t\t_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.initialize(_artyom__WEBPACK_IMPORTED_MODULE_1__.artyomConfig);\r\n\t\t// artyom.obey();\r\n\t} else {\r\n\t\t_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.fatality()\r\n\t\t// artyom.dontObey();\r\n\t}\r\n});\r\n\r\n//初始提示\r\n(0,_printLog__WEBPACK_IMPORTED_MODULE_2__.printLog)(\"欢迎来到盲棋游戏！\");\r\n(0,_printLog__WEBPACK_IMPORTED_MODULE_2__.printLog)(\"本游戏支持语音走棋，模拟真实的盲棋对弈场景。\");\r\n(0,_printLog__WEBPACK_IMPORTED_MODULE_2__.printLog)(\"您可点击“开始游戏”按钮，听到提示音后即可说出您的指令。\");\r\n(0,_printLog__WEBPACK_IMPORTED_MODULE_2__.printLog)(\"走棋指令例如：“炮二平五”、“马八进七”等。\");\r\n(0,_printLog__WEBPACK_IMPORTED_MODULE_2__.printLog)(\"若您在对弈过程中忘记了棋子位置，可随时询问，例如，您可以说：“我的兵在哪？”\");\r\n(0,_printLog__WEBPACK_IMPORTED_MODULE_2__.printLog)(\"预祝您游戏愉快！\");\r\n\r\n//侦听游戏事件\r\n\r\n_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.on(\"gameStarted\", () => {\r\n\t_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.say(\"游戏开始！\", {\r\n\t\tonEnd() {\r\n\t\t\t_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.initialize(_artyom__WEBPACK_IMPORTED_MODULE_1__.artyomConfig);\r\n\t\t}\r\n\t});\r\n\tstartOrEndBtn.innerText = \"结束游戏\";\r\n\trevokeBtn.disabled = drawBtn.disabled = surrenderBtn.disabled = listenBtn.disabled = false;\r\n});\r\n\r\n_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.on(\"gameEnded\", winner => {\r\n\t_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.say(\"游戏结束！\");\r\n\tswitch (winner) {\r\n\t\tcase \"r\":\r\n\t\t\t_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.say(\"红方获胜！\");\r\n\t\t\tbreak;\r\n\t\tcase \"b\":\r\n\t\t\t_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.say(\"黑方获胜！\");\r\n\t\t\tbreak;\r\n\t\tcase \"draw\":\r\n\t\t\t_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.say(\"平局！\");\r\n\t\t\tbreak;\r\n\t}\r\n\t_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.fatality();\r\n\tstartOrEndBtn.innerText = \"开始游戏\";\r\n\trevokeBtn.disabled = drawBtn.disabled = surrenderBtn.disabled = listenBtn.disabled = true;\r\n});\r\n\r\n_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.on(\"moveCompleted\", movedRecord => {\r\n\t_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.say(movedRecord.toString());\r\n});\r\n\r\n_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.on(\"moveFailed\", movedRecord => {\r\n\t_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.say(\"无法完成\" + movedRecord.toString());\r\n});\r\n\r\n_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.on(\"moveRevoke\", () => {\r\n\t_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.say(\"悔棋成功！\");\r\n});\r\n\r\n_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.on(\"eat\", () => {\r\n\t_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.say(\"吃子！\");\r\n});\r\n\r\n_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.on(\"jiang\", () => {\r\n\t_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.say(\"将军！\");\r\n});\r\n\r\n_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.on(\"draw\", isRed => {\r\n\tconst isOk = confirm(`${isRed ? \"红\" : \"黑\"}方求和，是否同意？`);\r\n\tif (isOk) {\r\n\t\t_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.endGame(\"draw\");\r\n\t}\r\n});\r\n\r\n_gameController__WEBPACK_IMPORTED_MODULE_0__.gameController.on(\"surrender\", isRed => {\r\n\t_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.say(`${isRed ? \"红\" : \"黑\"}方认输`);\r\n});\r\n\r\n_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.when(\"COMMAND_RECOGNITION_START\", function () {\r\n\tlistenBtn.innerText = \"停止聆听\";\r\n});\r\n\r\n_artyom__WEBPACK_IMPORTED_MODULE_1__.artyom.when(\"COMMAND_RECOGNITION_END\", function (status) {\r\n\tlistenBtn.innerText = \"开始聆听\";\r\n});\r\n\n\n//# sourceURL=webpack://xiangqi/./src/main.js?");

/***/ }),

/***/ "./src/printLog.js":
/*!*************************!*\
  !*** ./src/printLog.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"printLog\": () => (/* binding */ printLog)\n/* harmony export */ });\n// 在页面中打印日志\r\nfunction printLog(log, type) {\r\n\tconst logsList = document.querySelector('#logs-list');\r\n\tlet prefix = \"\";\r\n\tswitch (type) {\r\n\t\tcase \"in\":\r\n\t\t\tprefix = \"input: \";\r\n\t\t\tbreak;\r\n\t\tcase \"out\":\r\n\t\t\tprefix = \"output: \";\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tconst li = createListItem({\r\n\t\tinnerHTML: prefix + log,\r\n\t});\r\n\tlogsList.appendChild(li);\r\n\tli.scrollIntoView();\r\n}\r\n\r\n\r\nfunction createListItem({\r\n\tinnerHTML = \"\",\r\n\tclassList = [],\r\n\tdataset = {},\r\n}) {\r\n\tconst li = document.createElement(\"li\");\r\n\tli.setAttribute(\"role\", \"option\");\r\n\tli.className = \"list-group-item\";\r\n\tli.innerHTML = innerHTML;\r\n\tclassList.forEach(item => li.classList.add(item));\r\n\tfor (const key in dataset) {\r\n\t\tli.dataset[key] = dataset[key];\r\n\t}\r\n\treturn li;\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://xiangqi/./src/printLog.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.js");
/******/ 	
/******/ })()
;